// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.17/esri/copyright.txt for details.
//>>built
define("require exports ../../../../core/maybe ../../../../core/PooledArray ../../../../core/screenUtils ../../../../core/libs/gl-matrix-2/vec3 ../../../../core/libs/gl-matrix-2/vec3f64 ../../support/geometryUtils ../../support/stack ../../webgl-engine/lib/Intersector ../../webgl-engine/lib/intersectorUtils".split(" "),function(A,z,q,G,v,m,H,r,h,n,B){function C(d,a,b){for(var c=0;c<d.length;c++){var D=d[c];a&&!a(D)||b.push(D)}return b}function E(d){t||(t=new n.Intersector(d));t.viewingMode=d;return t}
Object.defineProperty(z,"__esModule",{value:!0});z.SceneIntersectionHelper=void 0;A=function(){function d(a,b,c){this.viewingMode=a;this.layerProvider=b;this.view=c;this.externalIntersectionHandlers=new G;this.tolerance=n.Intersector.DEFAULT_TOLERANCE;this.tmpRay=r.ray.create();this.validateHUDIntersector=new n.Intersector(this.viewingMode);this.validateHUDIntersector.options.hud=!1}d.prototype.intersectScreen=function(a,b){return this.intersectRay(this.getPickRay(a,this.tmpRay),E(this.viewingMode),
b)};d.prototype.intersectScreenFreePointFallback=function(a,b){return this.intersectRayFreePointFallback(this.getPickRay(a,this.tmpRay),b)};d.prototype.intersectRayFreePointFallback=function(a,b){return this.intersectRay(a,E(this.viewingMode),b)||this.intersectRayFreePointLocal(a,b)};d.prototype.intersectRay=function(a,b,c,d){b.options.selectionMode=!1;b.options.store=0;this.computeIntersection(a,b,d);return b.results.min?b.results.min.getIntersectionPoint(c):!1};d.prototype.getCenterRayWithSubpixelOffset=
function(a,b,c,d){void 0===c&&(c=.5);void 0===d&&(d=.5);a.getRenderCenter(k,c,d);k[0]+=.0466;k[1]-=.0123;return r.ray.fromRenderAtEye(a,k,b)};d.prototype.intersectIntersectorScreen=function(a,b,c){this.computeIntersection(this.getPickRay(a,this.tmpRay),b,c)};d.prototype.intersectToolIntersectorScreen=function(a,b,c){a=this.getPickRay(a,this.tmpRay);this.intersectToolIntersectorRay(a,b,c)};d.prototype.intersectToolIntersectorRay=function(a,b,c){b.options.selectionMode=!0;this.computeIntersection(a,
b,c);var d=b.results.min;this.view.basemapTerrain&&this.view.basemapTerrain.isOpaque()||d.hasIntersectionPoint&&"TerrainRenderer"!==d.intersector||(b.options.selectionMode=!1,this.computeIntersection(a,b,c))};d.prototype.setTolerance=function(a){void 0===a&&(a=n.Intersector.DEFAULT_TOLERANCE);this.tolerance=a};d.prototype.addIntersectionHandler=function(a){this.externalIntersectionHandlers.push(a);this.externalIntersectionHandlers.sort(function(a,c){return"Terrain"===a.type?1:"Terrain"===c.type?-1:
0})};d.prototype.removeIntersectionHandler=function(a){this.externalIntersectionHandlers.removeUnordered(a);this.externalIntersectionHandlers.sort(function(a,c){return"Terrain"===a.type?1:"Terrain"===c.type?-1:0})};d.prototype.getPickRay=function(a,b){void 0===b&&(b=r.ray.create());return r.ray.fromScreen(this.view.state.camera,a,b)};d.prototype.intersectRayFreePointLocal=function(a,b){if(2!==this.viewingMode)return!1;var c=this.view.dataExtent,d=Math.max(c.xmax-c.xmin,c.ymax-c.ymin,8*Math.max(c.xmax-
c.xmin,c.ymax-c.ymin));if(0===d)return m.vec3.add(b,a.origin,m.vec3.normalize(h.sv3d.get(),a.direction)),!0;var e=this.view.state.camera,l=Math.max(0,c.xmin-e.eye[0],e.eye[0]-c.xmax),c=Math.max(0,c.ymin-e.eye[1],e.eye[1]-c.ymax),e=d/Math.max(1,Math.pow(Math.max(0,Math.log(d/(Math.abs(e.relativeElevation)+Number.MIN_VALUE))),2)),e=Math.max(e,Math.min(Math.sqrt(l*l+c*c),d)),d=m.vec3.scale(h.sv3d.get(),a.direction,e/m.vec3.length(a.direction));m.vec3.add(b,a.origin,d);return!0};d.prototype.intersectElevationFromScreen=
function(a,b,c){void 0===c&&(c=0);return this.intersectElevation(this.getPickRay(a,this.tmpRay),b,c)};d.prototype.intersectElevation=function(a,b,c){void 0===c&&(c=0);var d=q.isSome(b)?b.mode:"absolute-height",e=q.isSome(b)?q.unwrapOr(b.offset,0):0,l="on-the-ground"!==d?e+c:0;b=l/this.view.renderCoordsHelper.unitInMeters;if("absolute-height"===d)return this.view.renderCoordsHelper.intersectManifold(a,l,p)?(c=this.view.computeMapPointFromVec3d(p),c.z-=e,c):null;var e=this.view.state.camera,g=v.castRenderScreenPointArray3(h.sv3d.get());
e.projectPoint(a.origin,g);var l=this.prepareFilters(null,u),k=this.view.slicePlane,F=q.isSome(k)?B.sliceFilterPredicate(k):null,f=new n.Intersector(this.viewingMode);f.options.store=0;f.options.verticalOffset=b;b=a.origin;a=m.vec3.add(h.sv3d.get(),b,a.direction);f.reset(b,a);f.point=g;f.camera=e;f.filterPredicate=null;switch(d){case "relative-to-scene":f.intersect(l.layers,g,e,this.tolerance,null,function(a){return a.metadata&&a.metadata.isElevationSource});this.externalIntersectionHandlers.forEachSimple(function(a){"I3S"!==
a.type&&"Terrain"!==a.type||a.intersect(f,a.slicePlane?F:null,f.rayBeginPoint,f.rayEndPoint,g)});break;case "on-the-ground":case "relative-to-ground":this.externalIntersectionHandlers.forEachSimple(function(a){a.isGround&&a.intersect(f,a.slicePlane?F:null,f.rayBeginPoint,f.rayEndPoint,g)})}return f.results.min.getIntersectionPoint(p)?(d=this.view.computeMapPointFromVec3d(p),d.z=c,d):null};d.prototype.computeIntersection=function(a,b,c){var d=this,e=this.view.state.camera,l=v.castRenderScreenPointArray3(h.sv3d.get());
e.projectPoint(a.origin,l);var g=this.prepareFilters(c,u);b.options.selectOpaqueTerrainOnly=!c||!("include"in c||"exclude"in c);var k=a.origin,n=m.vec3.add(h.sv3d.get(),a.origin,a.direction);b.reset(k,n);b.intersect(g.layers,l,e,this.tolerance);a=this.view.slicePlane;var f=q.isSome(a)?B.sliceFilterPredicate(a):null;b.intersect(g.sliceableLayers,l,e,this.tolerance,f);var r=c&&(c.requiresGroundFeedback||c.enableDraped);this.externalIntersectionHandlers.forEachSimple(function(a){b.options.isFiltered=
!g.filterLayerUid(a.intersectionHandlerId);(a.isGround&&r||!b.options.isFiltered)&&a.intersect(b,a.slicePlane?f:null,k,n,l)});a=h.sv3d.get();if(c&&c.enableDraped&&b.results.ground.getIntersectionPoint(a)){c=this.view.basemapTerrain.overlayManager.renderer;var t=this.view.renderCoordsHelper.spatialReference,p=h.sv3d.get();this.view.renderCoordsHelper.fromRenderCoords(a,p,this.view.spatialReference);p[2]=this.view.elevationProvider.getElevation(a[0],a[1],a[2],t,"ground")||0;c.intersect(b,p,g.filterRenderGeometry)}b.sortResults();
a=b.results.hud;if(a.hasIntersectionPoint){var x=v.castRenderScreenPointArray3(h.sv3d.get()),w=h.sv3d.get(),y=h.sv3d.get();this.unprojectHUDResultRay(a.center,x,w,y);c=m.vec3.distance(a.center,w)/m.vec3.distance(w,y)*.99;this.validateHUDIntersector.reset(w,y);this.validateHUDIntersector.intersect(g.layers,x,e,this.tolerance);this.validateHUDIntersector.intersect(g.sliceableLayers,x,e,this.tolerance,f);this.externalIntersectionHandlers.forEachSimple(function(a){g.filterLayerUid(a.intersectionHandlerId)&&
a.intersect(d.validateHUDIntersector,a.slicePlane?f:null,w,y,x)});e=this.validateHUDIntersector.results.min;if(null==e.dist||c<=e.dist)b.results.min.copyFrom(a),b.results.all.splice(0,0,a)}};d.prototype.prepareFilters=function(a,b){var c=[],d=[];this.layerProvider.forEachLayer(function(a){a.isPickable&&(a.isSliceable?d:c).push(a)});b.include=a&&a.include;b.exclude=a&&a.exclude;b.layers.length=0;b.sliceableLayers.length=0;C(c,b.filterLayer,b.layers);C(d,b.filterLayer,b.sliceableLayers);return b};d.prototype.unprojectHUDResultRay=
function(a,b,c,d){var e=this.view.state.camera;e.projectPoint(a,b);a=v.castRenderScreenPointArray3(h.sv3d.get());a[0]=b[0];a[1]=b[1];a[2]=0;e.unprojectPoint(a,c);a[2]=1;e.unprojectPoint(a,d)};return d}();z.SceneIntersectionHelper=A;var t,u={include:null,exclude:null,layers:[],sliceableLayers:[],filterLayer:function(d){return u.filterLayerUid(d.apiLayerUid)},filterLayerUid:function(d){var a=u.include,b=u.exclude;return q.isNone(d)?null==a&&null==b:(null==a||a.has(d))&&(null==b||!b.has(d))},filterRenderGeometry:function(d){return u.filterLayerUid(d.data.layerUid)}},
p=H.vec3f64.create(),k=v.createRenderScreenPointArray()});