// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.17/esri/copyright.txt for details.
//>>built
define("require exports tslib ../../../core/shaderLibrary/attributes/VertexPosition.glsl ../../../core/shaderLibrary/util/IsNaN.glsl ../../../core/shaderModules/interfaces".split(" "),function(l,b,c,h,k,d){Object.defineProperty(b,"__esModule",{value:!0});b.AdjustProjectedPosition=void 0;b.AdjustProjectedPosition=function(a,b){a.vertex.include(k.IsNaN);a.include(h.VertexPosition,b);a=a.vertex;a.uniforms.add("uDepthBias","vec2");a.uniforms.add("uViewportDimInv","vec2");b.legacy?(a.uniforms.add("uView",
"mat4"),a.uniforms.add("uProj","mat4")):a.uniforms.add("uTransformNormal_ViewFromGlobal","mat3");b.legacy?a.code.add(d.glsl(e||(e=c.__makeTemplateObject(["\n      vec2 calculateProjectedBiasXY(vec4 projPos, vec3 globalNormal) {\n        float offsetXY \x3d uDepthBias.x;\n        float offsetZ  \x3d uDepthBias.y;\n\n        // screen space pixel offset\n        // we multiply by two to account for the fact that NDC go from -1 to 1\n        // we multiply by projPos.w to compensate for the perspective division that happens later\n        // normalizing over xyz means that the xy influence is reduced the more the normal is pointing\n        // towards the camera\n        vec4 projNormal \x3d uProj * uView * vec4(globalNormal, 0.0);\n\n        return offsetXY * projPos.w * 2.0 * uViewportDimInv * normalize(projNormal.xyz).xy;\n      }\n    "],
["\n      vec2 calculateProjectedBiasXY(vec4 projPos, vec3 globalNormal) {\n        float offsetXY \x3d uDepthBias.x;\n        float offsetZ  \x3d uDepthBias.y;\n\n        // screen space pixel offset\n        // we multiply by two to account for the fact that NDC go from -1 to 1\n        // we multiply by projPos.w to compensate for the perspective division that happens later\n        // normalizing over xyz means that the xy influence is reduced the more the normal is pointing\n        // towards the camera\n        vec4 projNormal \x3d uProj * uView * vec4(globalNormal, 0.0);\n\n        return offsetXY * projPos.w * 2.0 * uViewportDimInv * normalize(projNormal.xyz).xy;\n      }\n    "])))):
a.code.add(d.glsl(f||(f=c.__makeTemplateObject(["\n      vec2 calculateProjectedBiasXY(vec4 projPos, vec3 globalNormal) {\n        float offsetXY \x3d uDepthBias.x;\n        float offsetZ  \x3d uDepthBias.y;\n\n        // screen space pixel offset\n        // we multiply by two to account for the fact that NDC go from -1 to 1\n        // we multiply by projPos.w to compensate for the perspective division that happens later\n        // normalizing over xyz means that the xy influence is reduced the more the normal is pointing\n        // towards the camera\n        vec4 projNormal \x3d uTransform_ProjFromView * vec4(uTransformNormal_ViewFromGlobal * globalNormal, 0.0);\n\n        return offsetXY * projPos.w * 2.0 * uViewportDimInv * normalize(projNormal.xyz).xy;\n      }\n    "],
["\n      vec2 calculateProjectedBiasXY(vec4 projPos, vec3 globalNormal) {\n        float offsetXY \x3d uDepthBias.x;\n        float offsetZ  \x3d uDepthBias.y;\n\n        // screen space pixel offset\n        // we multiply by two to account for the fact that NDC go from -1 to 1\n        // we multiply by projPos.w to compensate for the perspective division that happens later\n        // normalizing over xyz means that the xy influence is reduced the more the normal is pointing\n        // towards the camera\n        vec4 projNormal \x3d uTransform_ProjFromView * vec4(uTransformNormal_ViewFromGlobal * globalNormal, 0.0);\n\n        return offsetXY * projPos.w * 2.0 * uViewportDimInv * normalize(projNormal.xyz).xy;\n      }\n    "]))));
a.code.add(d.glsl(g||(g=c.__makeTemplateObject(["\n    // A z-offset, using a depth based heuristic.\n    float _calculateProjectedBiasZ(vec4 projPos) {\n      float offsetZ \x3d uDepthBias.y;\n      return sqrt(projPos.z) * offsetZ;\n    }\n\n    vec4 adjustProjectedPosition(vec4 projPos, vec3 worldNormal, float lineWidth) {\n      vec2 offsetXY \x3d calculateProjectedBiasXY(projPos, worldNormal);\n\n      // we currently have to do this check because some geometries come with 0 length edge normals.\n      // see https://devtopia.esri.com/WebGIS/arcgis-js-api/issues/12890\n      if (!isNaN(offsetXY.x) \x26\x26 !isNaN(offsetXY.y)) {\n        projPos.xy +\x3d offsetXY;\n      }\n\n      projPos.z +\x3d _calculateProjectedBiasZ(projPos);\n\n      return projPos;\n    }\n  "],
["\n    // A z-offset, using a depth based heuristic.\n    float _calculateProjectedBiasZ(vec4 projPos) {\n      float offsetZ \x3d uDepthBias.y;\n      return sqrt(projPos.z) * offsetZ;\n    }\n\n    vec4 adjustProjectedPosition(vec4 projPos, vec3 worldNormal, float lineWidth) {\n      vec2 offsetXY \x3d calculateProjectedBiasXY(projPos, worldNormal);\n\n      // we currently have to do this check because some geometries come with 0 length edge normals.\n      // see https://devtopia.esri.com/WebGIS/arcgis-js-api/issues/12890\n      if (!isNaN(offsetXY.x) \x26\x26 !isNaN(offsetXY.y)) {\n        projPos.xy +\x3d offsetXY;\n      }\n\n      projPos.z +\x3d _calculateProjectedBiasZ(projPos);\n\n      return projPos;\n    }\n  "]))))};
var e,f,g});