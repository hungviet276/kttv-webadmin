// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.17/esri/copyright.txt for details.
//>>built
define(["require","exports"],function(b,a){Object.defineProperty(a,"__esModule",{value:!0});a.default={background:{"background.frag":"uniform lowp vec4 u_color;\nvoid main() {\n  gl_FragColor \x3d u_color;\n}","background.vert":"attribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform mediump vec2 u_coord_range;\nuniform mediump float u_depth;\nvoid main() {\n  vec3 v_pos \x3d u_dvsMat3 * vec3(u_coord_range * a_pos, 1.0);\n  gl_Position \x3d vec4(v_pos.xy, 0.0, 1.0);\n}"},bitBlit:{"bitBlit.frag":"uniform lowp sampler2D u_tex;\nuniform lowp float u_opacity;\nvarying mediump vec2 v_uv;\nvoid main() {\n  lowp vec4 color \x3d texture2D(u_tex, v_uv);\n  gl_FragColor \x3d color *  u_opacity;\n}",
"bitBlit.vert":"attribute vec2 a_pos;\nattribute vec2 a_tex;\nvarying mediump vec2 v_uv;\nvoid main(void) {\n  gl_Position \x3d vec4(a_pos, 0.0, 1.0);\n  v_uv \x3d a_tex;\n}"},blend:{"blend.frag":"precision mediump float;\nuniform sampler2D u_layerTexture;\nuniform lowp float u_opacity;\nuniform lowp float u_inFadeOpacity;\n#ifndef NORMAL\nuniform sampler2D u_backbufferTexture;\n#endif\nvarying mediump vec2 v_uv;\nfloat rgb2v(in vec3 c) {\n  return max(c.x, max(c.y, c.z));\n}\nvec3 rgb2hsv(in vec3 c) {\n  vec4 K \x3d vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n  vec4 p \x3d c.g \x3c c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);\n  vec4 q \x3d c.r \x3c p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);\n  float d \x3d q.x - min(q.w, q.y);\n  float e \x3d 1.0e-10;\n  return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), min(d / (q.x + e), 1.0), q.x);\n}\nvec3 hsv2rgb(in vec3 c) {\n  vec4 K \x3d vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p \x3d abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\nvec3 tint(in vec3 Cb, in vec3 Cs) {\n  float vIn \x3d rgb2v(Cb);\n  vec3 hsvTint \x3d rgb2hsv(Cs);\n  vec3 hsvOut \x3d vec3(hsvTint.x, hsvTint.y, vIn * hsvTint.z);\n  return hsv2rgb(hsvOut);\n}\nfloat overlay(in float Cb, in float Cs) {\n  return (1.0 - step(0.5, Cs)) * (1.0 - 2.0 * (1.0 - Cs ) * (1.0 - Cb)) + step(0.5, Cs) * (2.0 * Cs * Cb);\n}\nfloat colorDodge(in float Cb, in float Cs) {\n  return (Cb \x3d\x3d 0.0) ? 0.0 : (Cs \x3d\x3d 1.0) ? 1.0 : min(1.0, Cb / (1.0 - Cs));\n}\nfloat colorBurn(in float Cb, in float Cs) {\n return (Cb \x3d\x3d 1.0) ? 1.0 : (Cs \x3d\x3d 0.0) ? 0.0 : 1.0 - min(1.0, (1.0 - Cb) / Cs);\n}\nfloat hardLight(in float Cb, in float Cs) {\n  return (1.0 - step(0.5, Cs)) * (2.0 * Cs * Cb) + step(0.5, Cs) * (1.0 - 2.0 * (1.0 - Cs) * (1.0 - Cb));\n}\nfloat reflectBlend(in float Cb, in float Cs) {\n\treturn (Cs \x3d\x3d 1.0) ? Cs : min(Cb * Cb / (1.0 - Cs), 1.0);\n}\nfloat softLight(in float Cb, in float Cs) {\n  if (Cs \x3c\x3d 0.5) {\n    return Cb - (1.0 - 2.0 * Cs) * Cb * (1.0 - Cb);\n  }\n  if (Cb \x3c\x3d 0.25) {\n    return Cb + (2.0 * Cs - 1.0) * Cb * ((16.0 * Cb - 12.0) * Cb + 3.0);\n  }\n  return Cb + (2.0 * Cs - 1.0) * (sqrt(Cb) - Cb);\n}\nfloat vividLight(in float Cb, in float Cs) {\n  return (1.0 - step(0.5, Cs)) * colorBurn(Cb, 2.0 * Cs) + step(0.5, Cs) * colorDodge(Cb, (2.0 * (Cs - 0.5)));\n}\nfloat minv3(in vec3 c) {\n  return min(min(c.r, c.g), c.b);\n}\nfloat maxv3(in vec3 c) {\n  return max(max(c.r, c.g), c.b);\n}\nfloat lumv3(in vec3 c) {\n  return dot(c, vec3(0.3, 0.59, 0.11));\n}\nfloat satv3(vec3 c) {\n  return maxv3(c) - minv3(c);\n}\nvec3 clipColor(vec3 color) {\n  float lum \x3d lumv3(color);\n  float mincol \x3d minv3(color);\n  float maxcol \x3d maxv3(color);\n  if (mincol \x3c 0.0) {\n    color \x3d lum + ((color - lum) * lum) / (lum - mincol);\n  }\n  if (maxcol \x3e 1.0) {\n    color \x3d lum + ((color - lum) * (1.0 - lum)) / (maxcol - lum);\n  }\n  return color;\n}\nvec3 setLum(vec3 cbase, vec3 clum) {\n  float lbase \x3d lumv3(cbase);\n  float llum \x3d lumv3(clum);\n  float ldiff \x3d llum - lbase;\n  vec3 color \x3d cbase + vec3(ldiff);\n  return clipColor(color);\n}\nvec3 setLumSat(vec3 cbase, vec3 csat, vec3 clum)\n{\n  float minbase \x3d minv3(cbase);\n  float sbase \x3d satv3(cbase);\n  float ssat \x3d satv3(csat);\n  vec3 color;\n  if (sbase \x3e 0.0) {\n    color \x3d (cbase - minbase) * ssat / sbase;\n  } else {\n    color \x3d vec3(0.0);\n  }\n  return setLum(color, clum);\n}\nvoid main() {\n  vec4 src \x3d texture2D(u_layerTexture, v_uv);\n#ifdef NORMAL\n  gl_FragColor \x3d src *  u_opacity;\n#else\n  vec4 dst \x3d texture2D(u_backbufferTexture, v_uv);\n  vec3 Cs \x3d src.a \x3d\x3d 0.0 ? src.rgb : vec3(src.rgb / src.a);\n  vec3 Cb \x3d dst.a \x3d\x3d 0.0 ? dst.rgb : vec3(dst.rgb / dst.a);\n  float as \x3d u_opacity * src.a;\n  float ab \x3d dst.a;\n  #ifdef DESTINATION_OVER\n    gl_FragColor \x3d vec4(as * Cs * (1.0 - ab) + ab * Cb, as + ab - as * ab);\n  #endif\n  #ifdef SOURCE_IN\n    vec4 color \x3d vec4(as * Cs * ab, as * ab);\n    vec4 fadeColor \x3d (1.0 - u_opacity) * u_inFadeOpacity * vec4(ab * Cb, ab);\n    gl_FragColor \x3d color + fadeColor;\n  #endif\n  #ifdef DESTINATION_IN\n    vec4 color \x3d vec4(ab * Cb * as, ab * as);\n    vec4 fadeColor \x3d (1.0 - u_opacity) * u_inFadeOpacity * vec4(ab * Cb, ab);\n    gl_FragColor \x3d color + fadeColor;\n  #endif\n  #ifdef SOURCE_OUT\n    gl_FragColor \x3d vec4(as * Cs * (1.0 - ab), as * (1.0 - ab));\n  #endif\n  #ifdef DESTINATION_OUT\n    gl_FragColor \x3d vec4(ab * Cb * (1.0 - as), ab * (1.0 - as));\n  #endif\n  #ifdef SOURCE_ATOP\n    gl_FragColor \x3d vec4(as * Cs * ab + ab * Cb * (1.0 - as), ab);\n  #endif\n  #ifdef DESTINATION_ATOP\n    gl_FragColor \x3d vec4(as * Cs * (1.0 - ab) + ab * Cb * as, as);\n  #endif\n  #ifdef XOR\n    gl_FragColor \x3d vec4(as * Cs * (1.0 - ab) + ab * Cb * (1.0 - as),\n                        as * (1.0 - ab) + ab * (1.0 - as));\n  #endif\n  #ifdef MULTIPLY\n    gl_FragColor \x3d vec4(as * Cs * ab * Cb + (1.0 - ab) * as * Cs + (1.0 - as) * ab * Cb,\n                        as + ab * (1.0 - as));\n  #endif\n  #ifdef SCREEN\n    gl_FragColor \x3d vec4((Cs + Cb - Cs * Cb) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\n                        as + ab * (1.0 - as));\n  #endif\n  #ifdef OVERLAY\n    vec3 f \x3d vec3(overlay(Cb.r, Cs.r), overlay(Cb.g, Cs.g), overlay(Cb.b, Cs.b));\n    gl_FragColor \x3d vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\n                        as + ab * (1.0 - as));\n  #endif\n  #ifdef DARKEN\n    gl_FragColor \x3d vec4(min(Cs, Cb) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\n                        as + ab * (1.0 - as));\n  #endif\n  #ifdef LIGHTER\n    gl_FragColor \x3d vec4(as * Cs + ab * Cb, as + ab);\n  #endif\n  #ifdef LIGHTEN\n    gl_FragColor \x3d vec4(max(Cs, Cb) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\n                        as + ab * (1.0 - as));\n  #endif\n  #ifdef COLOR_DODGE\n    vec3 f \x3d vec3(colorDodge(Cb.r, Cs.r), colorDodge(Cb.g, Cs.g), colorDodge(Cb.b, Cs.b));\n    gl_FragColor \x3d vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\n                        as + ab * (1.0 - as));\n  #endif\n  #ifdef COLOR_BURN\n    vec3 f \x3d vec3(colorBurn(Cb.r, Cs.r), colorBurn(Cb.g, Cs.g), colorBurn(Cb.b, Cs.b));\n    gl_FragColor \x3d vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\n                        as + ab * (1.0 - as));\n  #endif\n  #ifdef HARD_LIGHT\n    vec3 f \x3d vec3(hardLight(Cb.r, Cs.r), hardLight(Cb.g, Cs.g), hardLight(Cb.b, Cs.b));\n    gl_FragColor \x3d vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\n                        as + ab * (1.0 - as));\n  #endif\n  #ifdef SOFT_LIGHT\n    vec3 f \x3d vec3(softLight(Cb.r, Cs.r), softLight(Cb.g, Cs.g), softLight(Cb.b, Cs.b));\n    gl_FragColor \x3d vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\n                        as + ab * (1.0 - as));\n  #endif\n  #ifdef DIFFERENCE\n    gl_FragColor \x3d vec4(abs(Cb - Cs) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\n                        as + ab * (1.0 - as));\n  #endif\n  #ifdef EXCLUSION\n     vec3 f \x3d Cs + Cb - 2.0 * Cs * Cb;\n     gl_FragColor \x3d vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\n                        as + ab * (1.0 - as));\n  #endif\n  #ifdef INVERT\n    gl_FragColor \x3d vec4((1.0 - Cb) * as * ab + Cb * ab * (1.0 - as), ab);\n  #endif\n  #ifdef VIVID_LIGHT\n    vec3 f \x3d vec3(vividLight(Cb.r, Cs.r),\n                  vividLight(Cb.g, Cs.g),\n                  vividLight(Cb.b, Cs.b));\n    gl_FragColor \x3d vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\n                        as + ab * (1.0 - as));\n  #endif\n  #ifdef HUE\n    vec3 f \x3d setLumSat(Cs,Cb,Cb);\n    gl_FragColor \x3d vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\n                        as + ab * (1.0 - as));\n  #endif\n  #ifdef SATURATION\n    vec3 f \x3d setLumSat(Cb,Cs,Cb);\n    gl_FragColor \x3d vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\n                        as + ab * (1.0 - as));\n  #endif\n  #ifdef COLOR\n    vec3 f \x3d setLum(Cs,Cb);\n    gl_FragColor \x3d vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\n                        as + ab * (1.0 - as));\n  #endif\n  #ifdef LUMINOSITY\n    vec3 f \x3d setLum(Cb,Cs);\n    gl_FragColor \x3d vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\n                        as + ab * (1.0 - as));\n  #endif\n  #ifdef PLUS\n    gl_FragColor \x3d clamp(vec4(src.r + Cb.r, src.g + Cb.g, src.b + Cb.b, as + ab), 0.0, 1.0);\n  #endif\n  #ifdef MINUS\n     gl_FragColor \x3d vec4(clamp(vec3(Cb.r - src.r, Cb.g - src.g, Cb.b - src.b), 0.0, 1.0), ab * as);\n  #endif\n  #ifdef AVERAGE\n     vec3 f \x3d (Cb + Cs) / 2.0;\n     gl_FragColor \x3d vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\n                        as + ab * (1.0 - as));\n  #endif\n  #ifdef REFLECT\n    vec3 f \x3d vec3(reflectBlend(Cb.r, Cs.r),\n                  reflectBlend(Cb.g, Cs.g),\n                  reflectBlend(Cb.b, Cs.b));\n    gl_FragColor \x3d vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\n                        as + ab * (1.0 - as));\n  #endif\n#endif\n}",
"blend.vert":"attribute vec2 a_position;\nvarying mediump vec2 v_uv;\nvoid main(void) {\n  gl_Position \x3d vec4(a_position , 0.0, 1.0);\n  v_uv \x3d (a_position + 1.0) / 2.0;\n}"},filtering:{"bicubic.glsl":"vec4 computeWeights(float v) {\n  float b \x3d 1.0 / 6.0;\n  float v2 \x3d v * v;\n  float v3 \x3d v2 * v;\n  float w0 \x3d b * (-v3 + 3.0 * v2 - 3.0 * v + 1.0);\n  float w1 \x3d b * (3.0 * v3  - 6.0 * v2 + 4.0);\n  float w2 \x3d b * (-3.0 * v3 + 3.0 * v2 + 3.0 * v + 1.0);\n  float w3 \x3d b * v3;\n  return vec4(w0, w1, w2, w3);\n}\nvec4 bicubicOffsetsAndWeights(float v) {\n  vec4 w \x3d computeWeights(v);\n  float g0 \x3d w.x + w.y;\n  float g1 \x3d w.z + w.w;\n  float h0 \x3d 1.0 - (w.y / g0) + v;\n  float h1 \x3d 1.0 + (w.w / g1) - v;\n  return vec4(h0, h1, g0, g1);\n}\nvec4 sampleBicubicBSpline(sampler2D sampler, vec2 coords, vec2 texSize) {\n  vec2 eX \x3d vec2(1.0 / texSize.x, 0.0);\n  vec2 eY \x3d vec2(0.0, 1.0 / texSize.y);\n  vec2 texel \x3d coords * texSize - 0.5;\n  vec3 hgX \x3d bicubicOffsetsAndWeights(fract(texel).x).xyz;\n  vec3 hgY \x3d bicubicOffsetsAndWeights(fract(texel).y).xyz;\n  vec2 coords10 \x3d coords + hgX.x * eX;\n  vec2 coords00 \x3d coords - hgX.y * eX;\n  vec2 coords11 \x3d coords10 + hgY.x * eY;\n  vec2 coords01 \x3d coords00 + hgY.x * eY;\n  coords10 \x3d coords10 - hgY.y * eY;\n  coords00 \x3d coords00 - hgY.y * eY;\n  vec4 color00 \x3d texture2D(sampler, coords00);\n  vec4 color10 \x3d texture2D(sampler, coords10);\n  vec4 color01 \x3d texture2D(sampler, coords01);\n  vec4 color11 \x3d texture2D(sampler, coords11);\n  color00 \x3d mix(color00, color01, hgY.z);\n  color10 \x3d mix(color10, color11, hgY.z);\n  color00 \x3d mix(color00, color10, hgX.z);\n  return color00;\n}",
"bilinear.glsl":"vec4 sampleBilinear(sampler2D sampler, vec2 coords, vec2 texSize) {\n  vec2 texelStart \x3d floor(coords * texSize);\n  vec2 coord0 \x3d texelStart / texSize;\n  vec2 coord1 \x3d (texelStart +  vec2(1.0, 0.0)) / texSize;\n  vec2 coord2 \x3d (texelStart +  vec2(0.0, 1.0)) / texSize;\n  vec2 coord3 \x3d (texelStart +  vec2(1.0, 1.0)) / texSize;\n  vec4 color0 \x3d texture2D(sampler, coord0);\n  vec4 color1 \x3d texture2D(sampler, coord1);\n  vec4 color2 \x3d texture2D(sampler, coord2);\n  vec4 color3 \x3d texture2D(sampler, coord3);\n  vec2 blend \x3d fract(coords * texSize);\n  vec4 color01 \x3d mix(color0, color1, blend.x);\n  vec4 color23 \x3d mix(color2, color3, blend.x);\n  return mix(color01, color23, blend.y);\n}",
"epx.glsl":"vec4 sampleEPX(sampler2D sampler, float size, vec2 coords, vec2 texSize) {\n  vec2 invSize \x3d 1.0 / texSize;\n  vec2 texel \x3d coords * texSize;\n  vec2 texel_i \x3d floor(texel);\n  vec2 texel_frac \x3d fract(texel);\n  vec4 colorP \x3d texture2D(sampler, texel_i * invSize);\n  vec4 colorP1 \x3d vec4(colorP);\n  vec4 colorP2 \x3d vec4(colorP);\n  vec4 colorP3 \x3d vec4(colorP);\n  vec4 colorP4 \x3d vec4(colorP);\n  vec4 colorA \x3d texture2D(sampler, (texel_i - vec2(0.0, 1.0)) * invSize);\n  vec4 colorB \x3d texture2D(sampler, (texel_i + vec2(1.0, 0.0)) * invSize);\n  vec4 colorC \x3d texture2D(sampler, (texel_i - vec2(1.0, 0.0)) * invSize);\n  vec4 colorD \x3d texture2D(sampler, (texel_i + vec2(0.0, 1.0)) * invSize);\n  if (colorC \x3d\x3d colorA \x26\x26 colorC !\x3d colorD \x26\x26 colorA !\x3d colorB) {\n    colorP1 \x3d colorA;\n  }\n  if (colorA \x3d\x3d colorB \x26\x26 colorA !\x3d colorC \x26\x26 colorB !\x3d colorD) {\n    colorP2 \x3d colorB;\n  }\n  if (colorD \x3d\x3d colorC \x26\x26 colorD !\x3d colorB \x26\x26 colorC !\x3d colorA) {\n    colorP3 \x3d colorC;\n  }\n  if (colorB \x3d\x3d colorD \x26\x26 colorB !\x3d colorA \x26\x26 colorD !\x3d colorC) {\n    colorP4 \x3d colorD;\n  }\n  vec4 colorP12 \x3d mix(colorP1, colorP2, texel_frac.x);\n  vec4 colorP34 \x3d mix(colorP1, colorP2, texel_frac.x);\n  return mix(colorP12, colorP34, texel_frac.y);\n}"},
fx:{integrate:{"integrate.frag":"precision mediump float;\nuniform lowp sampler2D u_sourceTexture;\nuniform lowp sampler2D u_maskTexture;\nuniform mediump float u_zoomLevel;\nuniform highp float u_timeDelta;\nuniform highp float u_animationTime;\nvarying highp vec2 v_texcoord;\n#include \x3cmaterials/utils.glsl\x3e\nvoid main()\n{\n#ifdef DELTA\n  vec4 texel \x3d texture2D(u_sourceTexture, v_texcoord);\n  vec4 data0 \x3d texture2D(u_maskTexture, v_texcoord);\n  float flags \x3d data0.r * 255.0;\n  float groupMinZoom \x3d data0.g * 255.0;\n  float isVisible \x3d getFilterBit(flags, 0);\n  float wouldClip \x3d step(groupMinZoom, u_zoomLevel);\n  float direction \x3d wouldClip * 1.0 + (1.0 - wouldClip) * -1.0;\n  float dt \x3d u_timeDelta / max(u_animationTime, 0.0001);\n  vec4 nextState \x3d vec4(texel + direction * dt);\n  gl_FragColor \x3d  vec4(nextState);\n#elif defined(UPDATE)\n  vec4 texel \x3d texture2D(u_sourceTexture, v_texcoord);\n  gl_FragColor \x3d texel;\n#endif\n}",
"integrate.vert":"precision mediump float;\nattribute vec2 a_pos;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\n  v_texcoord \x3d a_pos;\n  gl_Position \x3d vec4(a_pos * 2.0 - 1.0, 0.0, 1.0);\n}"}},highlight:{"blur.frag":"varying mediump vec2 v_texcoord;\nuniform mediump vec4 u_direction;\nuniform mediump mat4 u_channelSelector;\nuniform mediump vec4 u_sigmas;\nuniform sampler2D u_texture;\nmediump vec4 gauss4(mediump vec2 dir) {\n  return exp(-dot(dir, dir) / (2.0 * u_sigmas * u_sigmas));\n}\nmediump float gauss1(mediump vec2 dir) {\n  return exp(-dot(dir, dir) / (2.0 * u_sigmas[3] * u_sigmas[3]));\n}\nmediump vec4 selectChannel(mediump vec4 sample) {\n  return u_channelSelector * sample;\n}\nvoid accumGauss4(mediump float i, inout mediump vec4 tot, inout mediump vec4 weight) {\n  mediump vec4 w \x3d gauss4(i * u_direction.xy);\n  tot +\x3d selectChannel(texture2D(u_texture, v_texcoord + i * u_direction.zw)) * w;\n  weight +\x3d w;\n}\nvoid accumGauss1(mediump float i, inout mediump float tot, inout mediump float weight) {\n  mediump float w \x3d gauss1(i * u_direction.xy);\n  tot +\x3d selectChannel(texture2D(u_texture, v_texcoord + i * u_direction.zw))[3] * w;\n  weight +\x3d w;\n}\nvoid main(void) {\n  mediump float tot \x3d 0.0;\n  mediump float weight \x3d 0.0;\n  accumGauss1(-4.0, tot, weight);\n  accumGauss1(-3.0, tot, weight);\n  accumGauss1(-2.0, tot, weight);\n  accumGauss1(-1.0, tot, weight);\n  accumGauss1(0.0, tot, weight);\n  accumGauss1(1.0, tot, weight);\n  accumGauss1(2.0, tot, weight);\n  accumGauss1(3.0, tot, weight);\n  accumGauss1(4.0, tot, weight);\n  gl_FragColor \x3d vec4(0.0, 0.0, 0.0, tot / weight);\n}",
"highlight.frag":"varying mediump vec2 v_texcoord;\nuniform sampler2D u_texture;\nuniform mediump vec4 u_sigmas;\nuniform sampler2D u_shade;\nuniform mediump vec2 u_minMaxDistance;\nmediump float estimateDistance() {\n  mediump float sigma \x3d u_sigmas[3];\n  mediump float y \x3d texture2D(u_texture, v_texcoord)[3];\n  const mediump float y0 \x3d 0.5;\n  mediump float m0 \x3d 1.0 / (sqrt(2.0 * 3.1415) * sigma);\n  mediump float d \x3d (y - y0) / m0;\n  return d;\n}\nmediump vec4 shade(mediump float d) {\n  mediump float mappedDistance \x3d (d - u_minMaxDistance.x) / (u_minMaxDistance.y - u_minMaxDistance.x);\n  mappedDistance \x3d clamp(mappedDistance, 0.0, 1.0);\n  return texture2D(u_shade, vec2(mappedDistance, 0.5));\n}\nvoid main(void) {\n  mediump float d \x3d estimateDistance();\n  gl_FragColor \x3d shade(d);\n}",
"textured.vert":"attribute mediump vec2 a_position;\nattribute mediump vec2 a_texcoord;\nvarying mediump vec2 v_texcoord;\nvoid main(void) {\n  gl_Position \x3d vec4(a_position, 0.0, 1.0);\n  v_texcoord \x3d a_texcoord;\n}"},magnifier:{"magnifier.frag":"uniform lowp vec4 u_background;\nuniform mediump sampler2D u_readbackTexture;\nuniform mediump sampler2D u_maskTexture;\nuniform mediump sampler2D u_overlyTexture;\nvarying mediump vec2 v_texCoord;\nvoid main(void)\n{\n  lowp vec4 color \x3d texture2D(u_readbackTexture, v_texCoord);\n  color \x3d color + (1.0 - color.a) * u_background;\n  lowp vec4 mask_color \x3d texture2D(u_maskTexture, v_texCoord);\n  lowp float gray \x3d 1.0 - dot(mask_color, vec4(0.3, 0.59, 0.11, 0));\n  color *\x3d gray;\n  lowp vec4 overley_color \x3d texture2D(u_overlyTexture, v_texCoord);\n  overley_color.rgb *\x3d overley_color.a;\n  gl_FragColor \x3d overley_color + (1.0 - overley_color.a) * color;\n}",
"magnifier.vert":"precision mediump float;\nattribute mediump vec2 a_pos;\nuniform mediump vec2 u_drawPos;\nuniform mediump float u_width;\nuniform mediump float u_height;\nvarying mediump vec2 v_texCoord;\nvoid main(void)\n{\n  v_texCoord \x3d a_pos;\n  vec2 coord \x3d u_drawPos + vec2(a_pos - 0.5) * vec2(u_width, u_height);\n  gl_Position \x3d vec4(coord, 0.0, 1.0);\n}"},materials:{"attributeData.glsl":"uniform highp sampler2D u_attributeData0;\nuniform highp sampler2D u_attributeData1;\nuniform highp sampler2D u_attributeData2;\nuniform highp sampler2D u_attributeData3;\nuniform highp int u_attributeTextureSize;\nhighp vec2 getAttributeDataCoords(in highp vec4 id) {\n  highp vec4 texel \x3d unpackDisplayIdTexel(id);\n  highp float size \x3d float(u_attributeTextureSize);\n  highp float u32 \x3d float(int(texel.r) + int(texel.g) * 256 + int(texel.b) * 256 * 256 + int(texel.a) * 256 * 256 * 256);\n  highp float col \x3d mod(u32, size);\n  highp float row \x3d (u32 - col) / size;\n  highp float u \x3d col / size;\n  highp float v \x3d row / size;\n  return vec2(u, v);\n}\nhighp vec4 getAttributeData0(in highp vec4 id) {\n  vec2 coords \x3d getAttributeDataCoords(id);\n  return texture2D(u_attributeData0, coords);\n}\nhighp vec4 getAttributeData1(in highp vec4 id) {\n  highp vec2 coords \x3d getAttributeDataCoords(id);\n  return texture2D(u_attributeData1, coords);\n}\nhighp vec4 getAttributeData2(in highp vec4 id) {\n  highp vec2 coords \x3d getAttributeDataCoords(id);\n  return texture2D(u_attributeData2, coords);\n}\nhighp vec4 getAttributeData3(in highp vec4 id) {\n  highp vec2 coords \x3d getAttributeDataCoords(id);\n  return texture2D(u_attributeData3, coords);\n}\nfloat u88VVToFloat(in vec2 v) {\n  bool isMagic \x3d v.x \x3d\x3d 255.0 \x26\x26 v.y \x3d\x3d 255.0;\n  if (isMagic) {\n    return NAN_MAGIC_NUMBER;\n  }\n  return (v.x + v.y * float(0x100)) - 32768.0;\n}",
"constants.glsl":"const float C_DEG_TO_RAD \x3d 3.14159265359 / 180.0;\nconst float C_256_TO_RAD \x3d 3.14159265359 / 128.0;\nconst float SIGNED_BYTE_TO_UNSIGNED \x3d 128.0;\nconst float POSITION_PRECISION \x3d 1.0 / 8.0;\nconst float FILL_POSITION_PRECISION \x3d 1.0 / 1.0;\nconst float SOFT_EDGE_RATIO \x3d 1.0;\nconst float THIN_LINE_WIDTH_FACTOR \x3d 1.1;\nconst float THIN_LINE_HALF_WIDTH \x3d 1.0;\nconst float EXTRUDE_SCALE_PLACEMENT_PADDING \x3d 1.0 / 4.0;\nconst float OFFSET_PRECISION \x3d 1.0 / 8.0;\nconst float OUTLINE_SCALE \x3d 1.0 / 5.0;\nconst float SDF_FONT_SIZE \x3d 24.0;\nconst float MAX_SDF_DISTANCE \x3d 8.0;\nconst float PLACEMENT_PADDING \x3d 8.0;\nconst float EPSILON \x3d 0.0000001;\nconst int MAX_FILTER_COUNT \x3d 2;\nconst int ATTR_VV_SIZE \x3d 0;\nconst int ATTR_VV_COLOR \x3d 1;\nconst int ATTR_VV_OPACITY \x3d 2;\nconst int ATTR_VV_ROTATION \x3d 3;\nconst highp float NAN_MAGIC_NUMBER \x3d 1e-30;",
"effects.glsl":"uniform highp mat4 u_insideEffectMat4[ MAX_FILTER_COUNT ];\nuniform highp mat4 u_outsideEffectMat4[ MAX_FILTER_COUNT ];\nuniform highp float u_insideOpacities[ MAX_FILTER_COUNT ];\nuniform highp float u_outsideOpacities[ MAX_FILTER_COUNT ];\nvec4 getEffectColor(in vec4 color, in float filterFlags) {\n  vec4 rgbw \x3d vec4(color.a \x3e 0.0 ? color.rgb / color.a : vec3(0.0), 1.0);\n  float a \x3d color.a;\n  for (int i \x3d 1; i \x3c EFFECT_COUNT + 1; i++) {\n    float bit \x3d getFilterBit(filterFlags, i);\n    rgbw \x3d u_insideEffectMat4[ i ] * (bit  * rgbw) + u_outsideEffectMat4[ i ] * ((1.0 - bit) * rgbw);\n    a    \x3d u_insideOpacities[ i ]  * (bit  * a)    + u_outsideOpacities[ i ]  * ((1.0 - bit) * a);\n  }\n  return vec4(rgbw.rgb * a, a);\n}\nvec3 applyFilter(inout vec4 color, inout vec3 pos, in float filterFlags) {\n  vec4 rgbw \x3d vec4(color.a \x3e 0.0 ? color.rgb / color.a : vec3(0.0), 1.0);\n  float a \x3d color.a;\n  for (int i \x3d 0; i \x3c EFFECT_COUNT + 1; i++) {\n    float bit \x3d getFilterBit(filterFlags, i);\n    rgbw \x3d u_insideEffectMat4[ i ] * (bit  * rgbw) + u_outsideEffectMat4[ i ] * ((1.0 - bit) * rgbw);\n    a    \x3d u_insideOpacities[ i ]  * (bit  * a)    + u_outsideOpacities[ i ]  * ((1.0 - bit) * a);\n  }\n  color.rgb \x3d rgbw.rgb * a;\n  color.a \x3d a;\n  pos.z +\x3d 2.0 * (1.0 - getFilterBit(filterFlags, 0));\n#ifdef HIGHLIGHT\n  pos.z +\x3d 2.0 * (1.0 - getHighlightBit(filterFlags));\n#endif\n  return pos;\n}\nvec3 applyFilterLabels(inout vec4 color, inout vec3 pos, in float filterFlags) {\n  float bit \x3d getFilterBit(filterFlags, 0);\n  pos.z +\x3d 2.0 * (1.0 - bit);\n#ifndef OUTSIDE_LABELS_VISIBLE\n  for (int i \x3d 1; i \x3c EFFECT_COUNT + 1; i++) {\n    float bit \x3d getFilterBit(filterFlags, i);\n    pos.z +\x3d 2.0 * (1.0 - bit);\n  }\n#endif\n  return pos;\n}",
fill:{"common.glsl":"#ifdef PATTERN\nuniform mediump vec2 u_mosaicSize;\n#endif\n#ifdef DOT_DENSITY\nuniform lowp vec4 u_isActive[ 2 ];\nuniform highp float u_dotValue;\nuniform highp float u_tileDotsOverArea;\nuniform highp float u_dotTextureDotCount;\nuniform mediump float u_tileZoomFactor;\n#endif\nvarying vec3 v_pos;\nvarying lowp float v_opacity;\nvarying lowp vec4 v_color;\nvarying highp vec4 v_id;\nvarying highp float v_flags;\n#ifdef PATTERN\nvarying mediump vec4 v_tlbr;\nvarying mediump vec2 v_tileTextureCoord;\n#endif\n#ifdef DOT_DENSITY\nvarying highp vec2 v_dotTextureCoords;\nvarying highp vec4 v_dotThresholds[ 2 ];\n#endif",
"fill.frag":"precision highp float;\n#include \x3cmaterials/constants.glsl\x3e\n#include \x3cmaterials/utils.glsl\x3e\n#include \x3cmaterials/fill/common.glsl\x3e\n#ifdef DOT_DENSITY\n#include \x3cmaterials/effects.glsl\x3e\n#endif\n#ifdef PATTERN\nuniform lowp sampler2D u_texture;\n#endif\n#ifdef DOT_DENSITY\nuniform mediump mat4 u_dotColors[ 2 ];\nuniform sampler2D u_dotTextures[ 2 ];\nuniform vec4 u_dotBackgroundColor;\n#endif\nvoid main() {\n#ifdef ID\n  gl_FragColor \x3d v_id;\n#elif defined(PATTERN)\n  mediump vec2 normalizedTextureCoord \x3d mod(v_tileTextureCoord, 1.0);\n  mediump vec2 samplePos \x3d mix(v_tlbr.xy, v_tlbr.zw, normalizedTextureCoord);\n  lowp vec4 color \x3d texture2D(u_texture, samplePos);\n  gl_FragColor \x3d v_opacity * v_color * color;\n#elif defined(DOT_DENSITY) \x26\x26 !defined(HIGHLIGHT)\n  vec4 textureThresholds0 \x3d texture2D(u_dotTextures[0], v_dotTextureCoords);\n  vec4 textureThresholds1 \x3d texture2D(u_dotTextures[1], v_dotTextureCoords);\n  vec4 difference0 \x3d v_dotThresholds[0] - textureThresholds0;\n  vec4 difference1 \x3d v_dotThresholds[1] - textureThresholds1;\n#ifdef DD_DOT_BLENDING\n  vec4 isPositive0 \x3d step(0.0, difference0);\n  vec4 isPositive1 \x3d step(0.0, difference1);\n  float weightSum \x3d dot(isPositive0, difference0) + dot(isPositive1, difference1);\n  float lessThanEqZero \x3d step(weightSum, 0.0);\n  float greaterThanZero \x3d 1.0 - lessThanEqZero ;\n  float divisor \x3d (weightSum + lessThanEqZero);\n  vec4 weights0 \x3d difference0 * isPositive0 / divisor;\n  vec4 weights1 \x3d difference1 * isPositive1 / divisor;\n  vec4 dotColor \x3d u_dotColors[0] * weights0 + u_dotColors[1] * weights1;\n  vec4 preEffectColor \x3d greaterThanZero * dotColor + lessThanEqZero * u_dotBackgroundColor;\n#else\n  float diffMax \x3d max(max4(difference0), max4(difference1));\n  float lessThanZero \x3d step(diffMax, 0.0);\n  float greaterOrEqZero \x3d 1.0 - lessThanZero;\n  vec4 isMax0 \x3d step(diffMax, difference0);\n  vec4 isMax1 \x3d step(diffMax, difference1);\n  vec4 dotColor \x3d u_dotColors[0] * isMax0 + u_dotColors[1] * isMax1;\n  vec4 preEffectColor \x3d greaterOrEqZero * dotColor + lessThanZero * u_dotBackgroundColor;\n#endif\n  gl_FragColor \x3d getEffectColor(preEffectColor, v_flags);\n#else\n  gl_FragColor \x3d v_opacity * v_color;\n#endif\n#ifdef HIGHLIGHT\n  gl_FragColor.a \x3d 1.0;\n#endif\n}",
"fill.vert":"precision highp float;\n#ifdef DOT_DENSITY\nattribute float a_inverseArea;\nvec4 a_color \x3d vec4(0.0, 0.0, 0.0, 1.0);\nvec4 a_aux3 \x3d vec4(0.0);\n#else\nattribute vec4 a_color;\nattribute vec4 a_tlbr;\nattribute vec4 a_aux1;\nattribute vec2 a_aux2;\nattribute vec4 a_aux3;\n#endif\n#include \x3cmaterials/vcommon.glsl\x3e\n#include \x3cmaterials/fill/common.glsl\x3e\n#ifdef DOT_DENSITY\nvec4 dotThreshold(vec4 featureAttrOverFeatureArea, float dotValue, float tileDotsOverArea) {\n  return featureAttrOverFeatureArea * (1.0 / dotValue)  * (1.0 / tileDotsOverArea);\n}\n#endif\nvoid main()\n{\n  INIT;\n  float a_bitSet \x3d a_aux3.a;\n  v_color     \x3d getColor(a_color, a_bitSet, 0);\n  v_opacity   \x3d getOpacity();\n  v_id        \x3d norm(a_id);\n  v_pos       \x3d u_dvsMat3 * vec3(a_pos * FILL_POSITION_PRECISION, 1.);\n  v_flags     \x3d getFilterFlags();\n#ifdef PATTERN\n  vec2 aux2 \x3d (1.0 / SIGNED_BYTE_TO_UNSIGNED) * a_aux2;\n  float width \x3d u_zoomFactor * a_aux1.x * aux2.x;\n  float height \x3d u_zoomFactor * a_aux1.y * aux2.y;\n  float angle \x3d C_256_TO_RAD * a_aux3.z;\n  float sinA \x3d sin(angle);\n  float cosA \x3d cos(angle);\n  mat3 patternMatrix \x3d mat3(cosA / width, sinA / height, 0,\n                           -sinA / width, cosA / height, 0,\n                            0,            0,             1);\n  vec2 symbolOffset \x3d (a_aux1.zw - SIGNED_BYTE_TO_UNSIGNED) / vec2(width, height);\n  v_tileTextureCoord \x3d (patternMatrix * vec3(a_pos * FILL_POSITION_PRECISION, 1.0)).xy - symbolOffset;\n  v_tlbr \x3d a_tlbr / u_mosaicSize.xyxy;\n#elif defined(DOT_DENSITY)\n  vec4 ddAttributeData0 \x3d getAttributeData2(a_id) * u_isActive[0] * a_inverseArea;\n  vec4 ddAttributeData1 \x3d getAttributeData3(a_id) * u_isActive[1] * a_inverseArea;\n  float size \x3d u_tileZoomFactor * 512.0 * 1.0 / u_pixelRatio;\n  v_dotThresholds[0] \x3d dotThreshold(ddAttributeData0, u_dotValue, u_tileDotsOverArea);\n  v_dotThresholds[1] \x3d dotThreshold(ddAttributeData1, u_dotValue, u_tileDotsOverArea);\n  v_dotTextureCoords \x3d (a_pos * FILL_POSITION_PRECISION + 0.5) / size;\n#endif\n  gl_Position \x3d vec4(applyFilter(v_color, v_pos, v_flags), 1.0);\n}"},
icon:{"common.glsl":"uniform lowp vec2 u_mosaicSize;\nvarying lowp vec4 v_color;\nvarying highp vec4 v_id;\nvarying highp vec4 v_sizeTex;\nvarying mediump vec3 v_pos;\nvarying highp float v_filters;\nvarying lowp float v_opacity;\n#ifdef SDF\nvarying lowp vec4 v_outlineColor;\nvarying mediump float v_outlineWidth;\nvarying mediump float v_distRatio;\nvarying mediump float v_overridingOutlineColor;\nvarying mediump float v_isThin;\n#endif","icon.frag":"precision mediump float;\n#include \x3cmaterials/constants.glsl\x3e\n#include \x3cmaterials/utils.glsl\x3e\n#include \x3cutil/encoding.glsl\x3e\n#include \x3cmaterials/effects.glsl\x3e\n#include \x3cmaterials/constants.glsl\x3e\n#include \x3cmaterials/icon/common.glsl\x3e\nuniform lowp sampler2D u_texture;\nvoid main()\n{\n  vec2 v_size \x3d v_sizeTex.xy;\n  vec2 v_tex  \x3d v_sizeTex.zw;\n#ifdef SDF\n  lowp vec4 fillPixelColor \x3d v_color;\n  float d \x3d 0.5 - rgba2float(texture2D(u_texture, v_tex));\n  float size \x3d max(v_size.x, v_size.y);\n  float dist \x3d d * size * SOFT_EDGE_RATIO * v_distRatio;\n  fillPixelColor *\x3d clamp(0.5 - dist, 0.0, 1.0);\n  float outlineWidth \x3d v_outlineWidth;\n  #ifdef HIGHLIGHT\n    outlineWidth \x3d max(outlineWidth, 4.0 * v_isThin);\n  #endif\n  if (outlineWidth \x3e 0.25) {\n    lowp vec4 outlinePixelColor \x3d v_overridingOutlineColor * v_color + (1.0 - v_overridingOutlineColor) * v_outlineColor;\n    float clampedOutlineSize \x3d min(outlineWidth, size);\n    outlinePixelColor *\x3d clamp(0.5 - abs(dist) + clampedOutlineSize * 0.5, 0.0, 1.0);\n    gl_FragColor \x3d v_opacity * ((1.0 - outlinePixelColor.a) * fillPixelColor + outlinePixelColor);\n  }\n  else {\n    gl_FragColor \x3d v_opacity * fillPixelColor;\n  }\n#else\n   lowp vec4 texColor \x3d texture2D(u_texture, v_tex);\n   gl_FragColor \x3d v_opacity * getEffectColor(texColor, v_filters);\n#endif\n#ifdef HIGHLIGHT\n  gl_FragColor.a \x3d step(1.0 / 255.0, gl_FragColor.a);\n#endif\n#ifdef ID\n  if (gl_FragColor.a \x3c 1.0 / 255.0) {\n    discard;\n  }\n  gl_FragColor \x3d v_id;\n#endif\n}",
"icon.vert":"precision highp float;\nattribute vec4 a_color;\nattribute vec4 a_outlineColor;\nattribute vec4 a_sizeAndOutlineWidth;\nattribute vec2 a_vertexOffset;\nattribute vec2 a_texCoords;\nattribute vec4 a_bitSetAndDistRatio;\n#include \x3cmaterials/vcommon.glsl\x3e\n#include \x3cmaterials/icon/common.glsl\x3e\nvec2 getMarkerSize(inout vec2 offset, inout vec2 baseSize, inout float outlineSize, in float referenceSize, in float bitSet) {\n#ifdef VV_SIZE\n  float r \x3d getSize(baseSize.y) / referenceSize;\n  baseSize.xy *\x3d r;\n  offset.xy *\x3d r;\n  float scaleSymbolProportionally \x3d getBit(bitSet, 3);\n  outlineSize *\x3d scaleSymbolProportionally * (r - 1.0) + 1.0;\n#endif\n  return baseSize;\n}\nvec3 getOffset(in vec2 in_offset, float a_bitSet) {\n  float isMapAligned \x3d getBit(a_bitSet, 0);\n  vec3  offset       \x3d getRotation() * vec3(in_offset, 0.0);\n  return getMatrix(isMapAligned) * offset;\n}\nvoid main()\n{\n  INIT;\n  vec2  a_size   \x3d a_sizeAndOutlineWidth.xy * a_sizeAndOutlineWidth.xy / 128.0;\n  vec2  a_offset \x3d a_vertexOffset / 16.0;\n  float a_outlineSize \x3d a_sizeAndOutlineWidth.z * a_sizeAndOutlineWidth.z / 128.0;\n  float a_bitSet \x3d a_bitSetAndDistRatio.z;\n  vec2 v_size \x3d getMarkerSize(a_offset, a_size, a_outlineSize, a_sizeAndOutlineWidth.w * a_sizeAndOutlineWidth.w / 128.0, a_bitSet);\n  vec2 v_tex      \x3d a_texCoords / u_mosaicSize;\n  v_color    \x3d getColor(a_color, a_bitSet, 1);\n  v_opacity  \x3d getOpacity();\n  v_id       \x3d norm(a_id);\n  v_filters  \x3d getFilterFlags();\n  v_pos      \x3d u_dvsMat3 * vec3(a_pos * POSITION_PRECISION, 1.0) + getOffset(a_offset, a_bitSet);\n  v_sizeTex  \x3d vec4(v_size.xy, v_tex.xy);\n#ifdef SDF\n  v_isThin   \x3d getBit(a_bitSet, 2);\n  #ifdef VV_COLOR\n    v_overridingOutlineColor \x3d v_isThin;\n  #else\n    v_overridingOutlineColor \x3d 0.0;\n  #endif\n  v_outlineWidth \x3d min(a_outlineSize, max(max(v_size.x, v_size.y) - 0.99, 0.0));\n  v_outlineColor \x3d getEffectColor(a_outlineColor, v_filters);\n  v_distRatio \x3d a_bitSetAndDistRatio.w / 126.0;\n#endif\n  gl_Position \x3d vec4(applyFilter(v_color, v_pos, v_filters), 1.0);\n}"},
label:{"common.glsl":"uniform mediump float u_zoomLevel;\nuniform mediump float u_mapRotation;\nuniform mediump float u_mapAligned;\nuniform mediump vec2 u_mosaicSize;\nvarying mediump float v_antialiasingWidth;\nvarying mediump float v_edgeDistanceOffset;\nvarying mediump vec2 v_tex;\nvarying mediump vec4 v_color;\nvarying lowp vec4 v_animation;","label.frag":"#include \x3cmaterials/text/text.frag\x3e","label.vert":"precision highp float;\n#include \x3cmaterials/vcommon.glsl\x3e\n#include \x3cmaterials/text/common.glsl\x3e\nattribute vec4 a_color;\nattribute vec4 a_haloColor;\nattribute vec4 a_texAndSize;\nattribute vec4 a_refSymbolAndPlacementOffset;\nattribute vec4 a_glyphData;\nattribute vec2 a_vertexOffset;\nattribute vec2 a_texCoords;\nuniform float u_isHalo;\nuniform float u_zoomLevel;\nuniform float u_mapRotation;\nuniform float u_mapAligned;\nfloat getZ(in float minZoom, in float maxZoom, in float angle) {\n  float glyphAngle \x3d angle * 360.0 / 254.0;\n  float mapAngle \x3d u_mapRotation * 360.0 / 254.0;\n  float diffAngle \x3d min(360.0 - abs(mapAngle - glyphAngle), abs(mapAngle - glyphAngle));\n  float z \x3d 0.0;\n  z +\x3d u_mapAligned * (2.0 * (1.0 - step(minZoom, u_zoomLevel)));\n  z +\x3d u_mapAligned * 2.0 * step(90.0, diffAngle);\n  z +\x3d 2.0 * (1.0 - step(u_zoomLevel, maxZoom));\n  return z;\n}\nvoid main()\n{\n  INIT;\n  float groupMinZoom    \x3d getMinZoom();\n  float glyphMinZoom    \x3d a_glyphData.x;\n  float glyphMaxZoom    \x3d a_glyphData.y;\n  float glyphAngle      \x3d a_glyphData.z;\n  float a_minZoom          \x3d max(groupMinZoom, glyphMinZoom);\n  float a_placementPadding \x3d a_refSymbolAndPlacementOffset.x * EXTRUDE_SCALE_PLACEMENT_PADDING;\n  vec2  a_placementDir     \x3d unpack_u8_nf32(a_refSymbolAndPlacementOffset.zw);\n  float a_refSymbolSize    \x3d a_refSymbolAndPlacementOffset.y;\n  float fontSize           \x3d a_texAndSize.z;\n  float haloSize           \x3d a_texAndSize.w * OUTLINE_SCALE;\n  vec2  vertexOffset \x3d a_vertexOffset * OFFSET_PRECISION;\n  vec3  pos          \x3d vec3(a_pos * POSITION_PRECISION, 1.0);\n  float z            \x3d getZ(a_minZoom, glyphMaxZoom, glyphAngle);\n  float fontScale    \x3d fontSize / SDF_FONT_SIZE;\n  float halfSize     \x3d getSize(a_refSymbolSize) / 2.0;\n  float animation    \x3d pow(getAnimationState(), vec4(2.0)).r;\n  v_color     \x3d animation * ((1.0 - u_isHalo) * a_color + (u_isHalo * a_haloColor));\n  v_opacity   \x3d 1.0;\n  v_tex       \x3d a_texCoords / u_mosaicSize;\n  v_edgeDistanceOffset \x3d u_isHalo * haloSize / fontScale / MAX_SDF_DISTANCE;\n  v_antialiasingWidth  \x3d 0.105 * SDF_FONT_SIZE / fontSize / u_pixelRatio;\n  vec2 placementOffset \x3d a_placementDir * (halfSize + a_placementPadding);\n  vec3 glyphOffset     \x3d u_displayMat3 * vec3(vertexOffset + placementOffset, 0.0);\n  vec3 v_pos           \x3d vec3((u_dvsMat3 * pos + glyphOffset).xy, z);\n  gl_Position \x3d vec4(applyFilterLabels(v_color, v_pos, getFilterFlags()), 1.0);\n#ifdef DEBUG\n  v_color \x3d vec4(a_color.rgb, z \x3d\x3d 0.0 ? 1.0 : 0.645);\n#endif\n}"},
line:{"common.glsl":"varying lowp vec4 v_color;\nvarying highp vec4 v_id;\nvarying mediump vec2 v_normal;\nvarying mediump float v_lineHalfWidth;\nvarying lowp float v_opacity;\nvarying highp vec3 v_pos;\n#ifdef PATTERN\nuniform mediump vec2 u_mosaicSize;\nvarying mediump vec4 v_tlbr;\nvarying mediump vec2 v_patternSize;\n#endif\n#if defined(PATTERN) || defined(SDF)\nvarying highp float v_accumulatedDistance;\n#endif","line.frag":"precision lowp float;\n#include \x3cutil/encoding.glsl\x3e\n#include \x3cmaterials/constants.glsl\x3e\n#include \x3cmaterials/line/common.glsl\x3e\nuniform lowp float u_blur;\nuniform mediump float u_zoomFactor;\n#if defined(PATTERN) || defined(SDF)\nuniform sampler2D u_texture;\n#endif\n#ifdef SDF\nconst float sdfPatternHalfWidth \x3d 15.5;\nconst float widthFactor \x3d 2.0;\n#endif\nvoid main()\n{\n  mediump float thinLineFactor \x3d max(THIN_LINE_WIDTH_FACTOR * step(v_lineHalfWidth, THIN_LINE_HALF_WIDTH), 1.0);\n  mediump float fragDist \x3d length(v_normal) * v_lineHalfWidth;\n  lowp float alpha \x3d clamp(thinLineFactor * (v_lineHalfWidth - fragDist) / (u_blur + thinLineFactor - 1.0), 0.0, 1.0);\n#if defined(SDF) \x26\x26 !defined(HIGHLIGHT)\n  mediump float lineHalfWidth \x3d widthFactor * v_lineHalfWidth;\n  mediump float lineWidthRatio \x3d lineHalfWidth / sdfPatternHalfWidth;\n  mediump float relativeTexX \x3d mod((u_zoomFactor * v_accumulatedDistance + v_normal.x * lineHalfWidth) / (lineWidthRatio * v_patternSize.x), 1.0);\n  mediump float relativeTexY \x3d 0.5 + 0.5 * v_normal.y;\n  mediump vec2 texCoord \x3d mix(v_tlbr.xy, v_tlbr.zw, vec2(relativeTexX, relativeTexY));\n  mediump float d \x3d rgba2float(texture2D(u_texture, texCoord)) - 0.5;\n  float dist \x3d d * lineHalfWidth;\n  lowp vec4 fillPixelColor \x3d v_opacity * alpha * clamp(0.5 - dist, 0.0, 1.0) * v_color;\n  gl_FragColor \x3d fillPixelColor;\n#elif defined(PATTERN) \x26\x26 !defined(HIGHLIGHT)\n  mediump float lineHalfWidth \x3d v_lineHalfWidth;\n  mediump float adjustedPatternWidth \x3d v_patternSize.x * 2.0 * lineHalfWidth / v_patternSize.y;\n  mediump float relativeTexX \x3d mod((u_zoomFactor * v_accumulatedDistance + v_normal.x * lineHalfWidth) / adjustedPatternWidth, 1.0);\n  mediump float relativeTexY \x3d 0.5 + 0.5 * v_normal.y;\n  mediump vec2 texCoord \x3d mix(v_tlbr.xy, v_tlbr.zw, vec2(relativeTexY, relativeTexX));\n  lowp vec4 color \x3d texture2D(u_texture, texCoord);\n  gl_FragColor \x3d v_opacity * alpha * v_color * color;\n#else\n  gl_FragColor \x3d v_opacity * alpha * v_color;\n#endif\n#ifdef HIGHLIGHT\n  gl_FragColor.a \x3d step(1.0 / 255.0, gl_FragColor.a);\n#endif\n#ifdef ID\n  if (gl_FragColor.a \x3c 1.0 / 255.0) {\n    discard;\n  }\n  gl_FragColor \x3d v_id;\n#endif\n}",
"line.vert":"precision highp float;\nattribute vec4 a_color;\nattribute vec4 a_offsetAndNormal;\nattribute vec2 a_accumulatedDistanceAndHalfWidth;\nattribute vec4 a_tlbr;\nattribute vec4 a_segmentDirection;\nattribute vec2 a_aux;\n#include \x3cmaterials/vcommon.glsl\x3e\n#include \x3cmaterials/line/common.glsl\x3e\nconst float SCALE \x3d 1.0 / 31.0;\nconst float WIDTH_SCALE \x3d 1.0 / 1024.0;\nfloat getBaseLineHalfWidth(in float in_lineHalfWidth) {\n#ifdef VV_SIZE\n  float referenceHalfWidth \x3d a_aux.x * WIDTH_SCALE;\n  float lineWidth \x3d 2.0 * in_lineHalfWidth;\n  return 0.5 * (in_lineHalfWidth / referenceHalfWidth) * getSize(lineWidth);\n#else\n  return in_lineHalfWidth;\n#endif\n}\nfloat getLineHalfWidth(in float baseWidth, in float aa) {\n  float halfWidth \x3d max(baseWidth + aa, 0.45) + 0.1 * aa;\n#ifdef HIGHLIGHT\n  halfWidth \x3d max(halfWidth, 2.0);\n#endif\n  return halfWidth;\n}\nvec2 getDist(in vec2 offset, in float halfWidth) {\n  float thinLineFactor \x3d max(THIN_LINE_WIDTH_FACTOR * step(halfWidth, THIN_LINE_HALF_WIDTH), 1.0);\n#if defined(SDF) \x26\x26 !defined(HIGHLIGHT)\n  thinLineFactor *\x3d 2.0;\n#endif\n  return thinLineFactor * halfWidth * offset * SCALE;\n}\nvoid main()\n{\n  INIT;\n  float a_bitSet          \x3d a_segmentDirection.w;\n  float a_accumulatedDist \x3d a_accumulatedDistanceAndHalfWidth.x;\n  float a_lineHalfWidth   \x3d a_accumulatedDistanceAndHalfWidth.y * WIDTH_SCALE;\n  float aa                \x3d 0.5 * u_antialiasing;\n  vec2  a_offset          \x3d a_offsetAndNormal.xy;\n  float baseWidth \x3d getBaseLineHalfWidth(a_lineHalfWidth);\n  float halfWidth \x3d getLineHalfWidth(baseWidth, aa);\n  float z         \x3d 2.0 * step(baseWidth, 0.0);\n  vec2  dist      \x3d getDist(a_offset, halfWidth);\n  vec3  offset    \x3d u_displayViewMat3 * vec3(dist, 0.0);\n  vec3  pos       \x3d u_dvsMat3 * vec3(a_pos * POSITION_PRECISION, 1.0) + offset;\n  v_color         \x3d getColor(a_color, a_bitSet, 0);\n  v_opacity       \x3d getOpacity();\n  v_lineHalfWidth \x3d halfWidth;\n  v_id            \x3d norm(a_id);\n  v_normal        \x3d a_offsetAndNormal.zw * SCALE;\n  v_pos           \x3d vec3(pos.xy, z);\n#ifdef PATTERN\n  v_tlbr          \x3d a_tlbr / u_mosaicSize.xyxy;\n  v_patternSize   \x3d vec2(a_tlbr.z - a_tlbr.x, a_tlbr.w - a_tlbr.y);\n#endif\n#if defined(PATTERN) || defined(SDF)\n  v_accumulatedDistance \x3d a_accumulatedDist + dot(SCALE * a_segmentDirection.xy, dist / u_zoomFactor);\n#endif\n  gl_Position \x3d vec4(applyFilter(v_color, v_pos, getFilterFlags()), 1.0);\n}"},
text:{"common.glsl":"uniform highp vec2 u_mosaicSize;\nvarying highp vec4 v_id;\nvarying mediump vec3 v_pos;\nvarying lowp float v_opacity;\nvarying lowp vec4 v_color;\nvarying highp vec2 v_tex;\nvarying mediump float v_antialiasingWidth;\nvarying mediump float v_edgeDistanceOffset;\nvarying lowp float v_transparency;","text.frag":"precision mediump float;\n#include \x3cmaterials/text/common.glsl\x3e\nuniform lowp sampler2D u_texture;\nvoid main()\n{\n  float SDF_CUTOFF \x3d (2.0 / 8.0);\n  float SDF_BASE_EDGE_DIST \x3d 1.0 - SDF_CUTOFF;\n  lowp float dist \x3d texture2D(u_texture, v_tex).a;\n  mediump float edge \x3d SDF_BASE_EDGE_DIST - v_edgeDistanceOffset;\n#ifdef HIGHLIGHT\n  edge /\x3d 2.0;\n#endif\n  lowp float aa \x3d v_antialiasingWidth;\n  lowp float alpha \x3d smoothstep(edge - aa, edge + aa, dist);\n  gl_FragColor \x3d alpha * v_color * v_opacity;\n#ifdef ID\n  if (gl_FragColor.a \x3c 1.0 / 255.0) {\n    discard;\n  }\n  gl_FragColor \x3d v_id;\n#endif\n}",
"text.vert":"precision highp float;\n#include \x3cmaterials/utils.glsl\x3e\n#include \x3cmaterials/vcommon.glsl\x3e\n#include \x3cmaterials/text/common.glsl\x3e\nattribute vec4 a_color;\nattribute vec4 a_haloColor;\nattribute vec4 a_texFontSize;\nattribute vec4 a_aux;\nattribute vec2 a_vertexOffset;\nattribute vec2 a_texCoords;\nuniform float u_isHalo;\nfloat getTextSize(inout vec2 offset, in float baseSize, in float referenceSize) {\n#ifdef VV_SIZE\n   float ratio \x3d baseSize / referenceSize;\n   baseSize \x3d ratio * getSize(baseSize);\n#endif\n  return baseSize;\n}\nvoid main()\n{\n  INIT;\n  float a_bitSet      \x3d a_aux.w;\n  float a_fontSize    \x3d a_texFontSize.z;\n  vec2  a_offset      \x3d a_vertexOffset * OFFSET_PRECISION;\n  vec3  in_pos        \x3d vec3(a_pos * POSITION_PRECISION, 1.0);\n  float fontSize      \x3d getTextSize(a_offset, a_fontSize, a_aux.z * a_aux.z / 256.0);\n  float scaleFactor   \x3d fontSize / a_fontSize;\n  float fontScale     \x3d fontSize / SDF_FONT_SIZE;\n  vec3  offset        \x3d getRotation() * vec3(scaleFactor * a_offset, 0.0);\n  mat3  extrudeMatrix \x3d getBit(a_bitSet, 0) \x3d\x3d 1.0 ? u_displayViewMat3 : u_displayMat3;\n  v_color   \x3d u_isHalo * a_haloColor + (1.0 - u_isHalo) * getColor(a_color, a_bitSet, 1);\n  v_opacity \x3d getOpacity();\n  v_id      \x3d norm(a_id);\n  v_tex     \x3d a_texCoords / u_mosaicSize;\n  v_pos     \x3d u_dvsMat3 * in_pos + extrudeMatrix * offset;\n  v_edgeDistanceOffset \x3d u_isHalo * OUTLINE_SCALE * a_texFontSize.w / fontScale / MAX_SDF_DISTANCE;\n  v_antialiasingWidth  \x3d 0.105 * SDF_FONT_SIZE / fontSize / u_pixelRatio;\n  gl_Position \x3d  vec4(applyFilter(v_color, v_pos, getFilterFlags()), 1.0);\n}"},
"utils.glsl":"float rshift(in float u32, in int amount) {\n  return floor(u32 / pow(2.0, float(amount)));\n}\nfloat getBit(in float bitset, in int bitIndex) {\n  float offset \x3d pow(2.0, float(bitIndex));\n  return mod(floor(bitset / offset), 2.0);\n}\nfloat getFilterBit(in float bitset, in int bitIndex) {\n  return getBit(bitset, bitIndex + 1);\n}\nfloat getHighlightBit(in float bitset) {\n  return getBit(bitset, 0);\n}\nhighp vec4 unpackDisplayIdTexel(in highp vec4 bitset) {\n  float isAggregate \x3d getBit(bitset.a, 7);\n  return (1.0 - isAggregate) * bitset + isAggregate * (vec4(bitset.rgba) - vec4(0.0, 0.0, 0.0, float(0x80)));\n}\nvec4 unpack(in float u32) {\n  float r \x3d mod(rshift(u32, 0), 255.0);\n  float g \x3d mod(rshift(u32, 8), 255.0);\n  float b \x3d mod(rshift(u32, 16), 255.0);\n  float a \x3d mod(rshift(u32, 24), 255.0);\n  return vec4(r, g, b, a);\n}\nvec4 norm(in vec4 v) {\n  return v /\x3d 255.0;\n}\nfloat max4(vec4 target) {\n  return max(max(max(target.x, target.y), target.z), target.w);\n}\nvec2 unpack_u8_nf32(vec2 bytes) {\n  return (bytes - 127.0) / 127.0;\n}",
"vcommon.glsl":"#include \x3cmaterials/constants.glsl\x3e\n#include \x3cmaterials/utils.glsl\x3e\n#include \x3cmaterials/attributeData.glsl\x3e\n#include \x3cmaterials/vv.glsl\x3e\n#include \x3cmaterials/effects.glsl\x3e\nattribute vec2 a_pos;\nattribute highp vec4 a_id;\nuniform highp mat3 u_dvsMat3;\nuniform highp mat3 u_displayMat3;\nuniform highp mat3 u_displayViewMat3;\nuniform highp float u_pixelRatio;\nuniform mediump float u_zoomFactor;\nuniform mediump float u_antialiasing;\nvec4 VV_ADATA \x3d vec4(0.0);\nvoid loadVisualVariableData(inout vec4 target) {\n#ifdef OES_TEXTURE_FLOAT\n  target.rgba \x3d getAttributeData2(a_id);\n#else\n  vec4 data0 \x3d getAttributeData2(a_id);\n  vec4 data1 \x3d getAttributeData3(a_id);\n  target.r \x3d u88VVToFloat(data0.rg * 255.0);\n  target.g \x3d u88VVToFloat(data0.ba * 255.0);\n  target.b \x3d u88VVToFloat(data1.rg * 255.0);\n  target.a \x3d u88VVToFloat(data1.ba * 255.0);\n#endif\n}\n#ifdef VV\n  #define INIT loadVisualVariableData(VV_ADATA)\n#else\n  #define INIT\n#endif\nvec4 getColor(in vec4 a_color, in float a_bitSet, int index) {\n#ifdef VV_COLOR\n  float isColorLocked   \x3d getBit(a_bitSet, index);\n  return getVVColor(VV_ADATA[ATTR_VV_COLOR], a_color, isColorLocked);\n#else\n  return a_color;\n#endif\n}\nfloat getOpacity() {\n#ifdef VV_OPACITY\n  return getVVOpacity(VV_ADATA[ATTR_VV_OPACITY]);\n#else\n  return 1.0;\n#endif\n}\nfloat getSize(in float in_size) {\n#ifdef VV_SIZE\n  return getVVSize(in_size, VV_ADATA[ATTR_VV_SIZE]);\n#else\n  return in_size;\n#endif\n}\nmat3 getRotation() {\n#ifdef VV_ROTATION\n  return getVVRotationMat3(mod(VV_ADATA[ATTR_VV_ROTATION], 360.0));\n#else\n  return mat3(1.0);\n#endif\n}\nfloat getFilterFlags() {\n#ifdef IGNORES_SAMPLER_PRECISION\n  return ceil(getAttributeData0(a_id).x * 255.0);\n#else\n  return getAttributeData0(a_id).x * 255.0;\n#endif\n}\nvec4 getAnimationState() {\n  return getAttributeData1(a_id);\n}\nfloat getMinZoom() {\n  vec4 data0 \x3d getAttributeData0(a_id) * 255.0;\n  return data0.g;\n}\nmat3 getMatrix(float isMapAligned) {\n  return isMapAligned * u_displayViewMat3 + (1.0 - isMapAligned) * u_displayMat3;\n}",
"vv.glsl":"#if defined(VV_SIZE_MIN_MAX_VALUE) || defined(VV_SIZE_SCALE_STOPS) || defined(VV_SIZE_FIELD_STOPS) || defined(VV_SIZE_UNIT_VALUE)\n  #define VV_SIZE\n#endif\n#if defined(VV_COLOR) || defined(VV_SIZE) || defined(VV_OPACITY) || defined(VV_ROTATION)\n  #define VV\n#endif\n#ifdef VV_COLOR\nuniform highp float u_vvColorValues[8];\nuniform vec4 u_vvColors[8];\n#endif\n#ifdef VV_SIZE_MIN_MAX_VALUE\nuniform highp vec4 u_vvSizeMinMaxValue;\n#endif\n#ifdef VV_SIZE_SCALE_STOPS\nuniform highp float u_vvSizeScaleStopsValue;\n#endif\n#ifdef VV_SIZE_FIELD_STOPS\nuniform highp float u_vvSizeFieldStopsValues[6];\nuniform float u_vvSizeFieldStopsSizes[6];\n#endif\n#ifdef VV_SIZE_UNIT_VALUE\nuniform highp float u_vvSizeUnitValueWorldToPixelsRatio;\n#endif\n#ifdef VV_OPACITY\nuniform highp float u_vvOpacityValues[8];\nuniform float u_vvOpacities[8];\n#endif\n#ifdef VV_ROTATION\nuniform lowp float u_vvRotationType;\n#endif\nbool isNan(float val) {\n  return (val \x3d\x3d NAN_MAGIC_NUMBER);\n}\n#ifdef VV_SIZE_MIN_MAX_VALUE\nfloat getVVMinMaxSize(float sizeValue, float fallback) {\n  if (isNan(sizeValue)) {\n    return fallback;\n  }\n  float interpolationRatio \x3d (sizeValue  - u_vvSizeMinMaxValue.x) / (u_vvSizeMinMaxValue.y - u_vvSizeMinMaxValue.x);\n  interpolationRatio \x3d clamp(interpolationRatio, 0.0, 1.0);\n  return u_vvSizeMinMaxValue.z + interpolationRatio * (u_vvSizeMinMaxValue.w - u_vvSizeMinMaxValue.z);\n}\n#endif\n#ifdef VV_SIZE_FIELD_STOPS\nconst int VV_SIZE_N \x3d 6;\nfloat getVVStopsSize(float sizeValue, float fallback) {\n  if (isNan(sizeValue)) {\n    return fallback;\n  }\n  if (sizeValue \x3c\x3d u_vvSizeFieldStopsValues[0]) {\n    return u_vvSizeFieldStopsSizes[0];\n  }\n  for (int i \x3d 1; i \x3c VV_SIZE_N; ++i) {\n    if (u_vvSizeFieldStopsValues[i] \x3e\x3d sizeValue) {\n      float f \x3d (sizeValue - u_vvSizeFieldStopsValues[i-1]) / (u_vvSizeFieldStopsValues[i] - u_vvSizeFieldStopsValues[i-1]);\n      return mix(u_vvSizeFieldStopsSizes[i-1], u_vvSizeFieldStopsSizes[i], f);\n    }\n  }\n  return u_vvSizeFieldStopsSizes[VV_SIZE_N - 1];\n}\n#endif\n#ifdef VV_SIZE_UNIT_VALUE\nfloat getVVUnitValue(float sizeValue, float fallback) {\n  if (isNan(sizeValue)) {\n    return fallback;\n  }\n  return u_vvSizeUnitValueWorldToPixelsRatio * sizeValue;\n}\n#endif\n#ifdef VV_OPACITY\nconst int VV_OPACITY_N \x3d 8;\nfloat getVVOpacity(float opacityValue) {\n  if (isNan(opacityValue)) {\n    return 1.0;\n  }\n  if (opacityValue \x3c\x3d u_vvOpacityValues[0]) {\n    return u_vvOpacities[0];\n  }\n  for (int i \x3d 1; i \x3c VV_OPACITY_N; ++i) {\n    if (u_vvOpacityValues[i] \x3e\x3d opacityValue) {\n      float f \x3d (opacityValue - u_vvOpacityValues[i-1]) / (u_vvOpacityValues[i] - u_vvOpacityValues[i-1]);\n      return mix(u_vvOpacities[i-1], u_vvOpacities[i], f);\n    }\n  }\n  return u_vvOpacities[VV_OPACITY_N - 1];\n}\n#endif\n#ifdef VV_ROTATION\nmat4 getVVRotation(float rotationValue) {\n  if (isNan(rotationValue)) {\n    return mat4(1, 0, 0, 0,\n                0, 1, 0, 0,\n                0, 0, 1, 0,\n                0, 0, 0, 1);\n  }\n  float rotation \x3d rotationValue;\n  if (u_vvRotationType \x3d\x3d 1.0) {\n    rotation \x3d 90.0 - rotation;\n  }\n  float angle \x3d C_DEG_TO_RAD * rotation;\n  float sinA \x3d sin(angle);\n  float cosA \x3d cos(angle);\n  return mat4(cosA, sinA, 0, 0,\n              -sinA,  cosA, 0, 0,\n              0,     0, 1, 0,\n              0,     0, 0, 1);\n}\nmat3 getVVRotationMat3(float rotationValue) {\n  if (isNan(rotationValue)) {\n    return mat3(1, 0, 0,\n                0, 1, 0,\n                0, 0, 1);\n  }\n  float rotation \x3d rotationValue;\n  if (u_vvRotationType \x3d\x3d 1.0) {\n    rotation \x3d 90.0 - rotation;\n  }\n  float angle \x3d C_DEG_TO_RAD * -rotation;\n  float sinA \x3d sin(angle);\n  float cosA \x3d cos(angle);\n  return mat3(cosA, -sinA, 0,\n             sinA, cosA, 0,\n              0,    0,    1);\n}\n#endif\n#ifdef VV_COLOR\nconst int VV_COLOR_N \x3d 8;\nvec4 getVVColor(float colorValue, vec4 fallback, float isColorLocked) {\n  if (isNan(colorValue) || isColorLocked \x3d\x3d 1.0) {\n    return fallback;\n  }\n  if (colorValue \x3c\x3d u_vvColorValues[0]) {\n    return u_vvColors[0];\n  }\n  for (int i \x3d 1; i \x3c VV_COLOR_N; ++i) {\n    if (u_vvColorValues[i] \x3e\x3d colorValue) {\n      float f \x3d (colorValue - u_vvColorValues[i-1]) / (u_vvColorValues[i] - u_vvColorValues[i-1]);\n      return mix(u_vvColors[i-1], u_vvColors[i], f);\n    }\n  }\n  return u_vvColors[VV_COLOR_N - 1];\n}\n#endif\nfloat getVVSize(in float size, in float vvSize)  {\n#ifdef VV_SIZE_MIN_MAX_VALUE\n  return getVVMinMaxSize(vvSize, size);\n#elif defined(VV_SIZE_SCALE_STOPS)\n  return u_vvSizeScaleStopsValue;\n#elif defined(VV_SIZE_FIELD_STOPS)\n  float outSize \x3d getVVStopsSize(vvSize, size);\n  return isNan(outSize) ? size : outSize;\n#elif defined(VV_SIZE_UNIT_VALUE)\n  return getVVUnitValue(vvSize, size);\n#else\n  return size;\n#endif\n}"},
"post-processing":{blit:{"blit.frag":"precision mediump float;\nuniform sampler2D u_texture;\nvarying vec2 v_uv;\nvoid main() {\n  gl_FragColor \x3d texture2D(u_texture, v_uv);\n}"},bloom:{composite:{"composite.frag":"precision mediump float;\nvarying vec2 v_uv;\nuniform sampler2D u_blurTexture1;\nuniform sampler2D u_blurTexture2;\nuniform sampler2D u_blurTexture3;\nuniform sampler2D u_blurTexture4;\nuniform sampler2D u_blurTexture5;\nuniform float u_bloomStrength;\nuniform float u_bloomRadius;\nuniform float u_bloomFactors[NUMMIPS];\nuniform vec3 u_bloomTintColors[NUMMIPS];\nfloat lerpBloomFactor(const in float factor) {\n  float mirrorFactor \x3d 1.2 - factor;\n  return mix(factor, mirrorFactor, u_bloomRadius);\n}\nvoid main() {\n  gl_FragColor \x3d u_bloomStrength * (\n    lerpBloomFactor(u_bloomFactors[0]) * vec4(u_bloomTintColors[0], 1.0) * texture2D(u_blurTexture1, v_uv) +\n    lerpBloomFactor(u_bloomFactors[1]) * vec4(u_bloomTintColors[1], 1.0) * texture2D(u_blurTexture2, v_uv) +\n    lerpBloomFactor(u_bloomFactors[2]) * vec4(u_bloomTintColors[2], 1.0) * texture2D(u_blurTexture3, v_uv) +\n    lerpBloomFactor(u_bloomFactors[3]) * vec4(u_bloomTintColors[3], 1.0) * texture2D(u_blurTexture4, v_uv) +\n    lerpBloomFactor(u_bloomFactors[4]) * vec4(u_bloomTintColors[4], 1.0) * texture2D(u_blurTexture5, v_uv)\n  );\n}"},
gaussianBlur:{"gaussianBlur.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nuniform vec2 u_texSize;\nuniform vec2 u_direction;\nvarying vec2 v_uv;\n#define KERNEL_RADIUS RADIUS\n#define SIGMA RADIUS\nfloat gaussianPdf(in float x, in float sigma) {\n    return 0.39894 * exp(-0.5 * x * x / ( sigma * sigma)) / sigma;\n}\nvoid main() {\n  vec2 invSize \x3d 1.0 / u_texSize;\n  float fSigma \x3d float(SIGMA);\n  float weightSum \x3d gaussianPdf(0.0, fSigma);\n  vec4 pixelColorSum \x3d texture2D(u_colorTexture, v_uv) * weightSum;\n  for (int i \x3d 1; i \x3c KERNEL_RADIUS; i ++) {\n    float x \x3d float(i);\n    float w \x3d gaussianPdf(x, fSigma);\n    vec2 uvOffset \x3d u_direction * invSize * x;\n    vec4 sample1 \x3d texture2D(u_colorTexture, v_uv + uvOffset);\n    vec4 sample2 \x3d texture2D(u_colorTexture, v_uv - uvOffset);\n    pixelColorSum +\x3d (sample1 + sample2) * w;\n    weightSum +\x3d 2.0 * w;\n  }\n  gl_FragColor \x3d pixelColorSum /weightSum;\n}"},
luminosityHighPass:{"luminosityHighPass.frag":"precision mediump float;\nuniform sampler2D u_texture;\nuniform vec3 u_defaultColor;\nuniform float u_defaultOpacity;\nuniform float u_luminosityThreshold;\nuniform float u_smoothWidth;\nvarying vec2 v_uv;\nvoid main() {\n  vec4 texel \x3d texture2D(u_texture, v_uv);\n  vec3 luma \x3d vec3(0.299, 0.587, 0.114);\n  float v \x3d dot(texel.xyz, luma);\n  vec4 outputColor \x3d vec4(u_defaultColor.rgb, u_defaultOpacity);\n  float alpha \x3d smoothstep(u_luminosityThreshold, u_luminosityThreshold + u_smoothWidth, v);\n  gl_FragColor \x3d mix(outputColor, texel, alpha);\n}"}},
blur:{gaussianBlur:{"gaussianBlur.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nuniform vec2 u_texSize;\nuniform vec2 u_direction;\nuniform float u_sigma;\nvarying vec2 v_uv;\n#define KERNEL_RADIUS RADIUS\nfloat gaussianPdf(in float x, in float sigma) {\n    return 0.39894 * exp(-0.5 * x * x / ( sigma * sigma)) / sigma;\n}\nvoid main() {\n  vec2 invSize \x3d 1.0 / u_texSize;\n  float fSigma \x3d u_sigma;\n  float weightSum \x3d gaussianPdf(0.0, fSigma);\n  vec4 pixelColorSum \x3d texture2D(u_colorTexture, v_uv) * weightSum;\n  for (int i \x3d 1; i \x3c KERNEL_RADIUS; i ++) {\n    float x \x3d float(i);\n    float w \x3d gaussianPdf(x, fSigma);\n    vec2 uvOffset \x3d u_direction * invSize * x;\n    vec4 sample1 \x3d texture2D(u_colorTexture, v_uv + uvOffset);\n    vec4 sample2 \x3d texture2D(u_colorTexture, v_uv - uvOffset);\n    pixelColorSum +\x3d (sample1 + sample2) * w;\n    weightSum +\x3d 2.0 * w;\n  }\n  gl_FragColor \x3d pixelColorSum /weightSum;\n}"},
"radial-blur":{"radial-blur.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nvarying vec2 v_uv;\nconst float sampleDist \x3d 1.0;\nconst float sampleStrength \x3d 2.2;\nvoid main(void) {\n    float samples[10];\n    samples[0] \x3d -0.08;\n    samples[1] \x3d -0.05;\n    samples[2] \x3d -0.03;\n    samples[3] \x3d -0.02;\n    samples[4] \x3d -0.01;\n    samples[5] \x3d  0.01;\n    samples[6] \x3d  0.02;\n    samples[7] \x3d  0.03;\n    samples[8] \x3d  0.05;\n    samples[9] \x3d  0.08;\n    vec2 dir \x3d 0.5 - v_uv;\n    float dist \x3d sqrt(dir.x * dir.x + dir.y * dir.y);\n    dir \x3d dir / dist;\n    vec4 color \x3d texture2D(u_colorTexture,v_uv);\n    vec4 sum \x3d color;\n    for (int i \x3d 0; i \x3c 10; i++) {\n      sum +\x3d texture2D(u_colorTexture, v_uv + dir * samples[i] * sampleDist);\n    }\n    sum *\x3d 1.0 / 11.0;\n    float t \x3d dist * sampleStrength;\n    t \x3d clamp(t, 0.0, 1.0);\n    gl_FragColor \x3d mix(color, sum, t);\n}"}},
dra:{"dra.frag":"precision mediump float;\nuniform sampler2D u_minColor;\nuniform sampler2D u_maxColor;\nuniform sampler2D u_texture;\nvarying vec2 v_uv;\nvoid main() {\n  vec4 minColor \x3d texture2D(u_minColor, vec2(0.5));\n  vec4 maxColor \x3d texture2D(u_maxColor, vec2(0.5));\n  vec4 color \x3d texture2D(u_texture, v_uv);\n  vec3 minColorUnpremultiply \x3d minColor.rgb / minColor.a;\n  vec3 maxColorUnpremultiply \x3d maxColor.rgb / maxColor.a;\n  vec3 colorUnpremultiply \x3d color.rgb / color.a;\n  vec3 range \x3d maxColorUnpremultiply - minColorUnpremultiply;\n  gl_FragColor \x3d vec4(color.a * (colorUnpremultiply - minColorUnpremultiply) / range, color.a);\n}",
"min-max":{"min-max.frag":"#extension GL_EXT_draw_buffers : require\nprecision mediump float;\n#define CELL_SIZE 2\nuniform sampler2D u_minTexture;\nuniform sampler2D u_maxTexture;\nuniform vec2 u_srcResolution;\nuniform vec2 u_dstResolution;\nvarying vec2 v_uv;\nvoid main() {\n  vec2 srcPixel \x3d floor(gl_FragCoord.xy) * float(CELL_SIZE);\n  vec2 onePixel \x3d vec2(1.0) / u_srcResolution;\n  vec2 uv \x3d (srcPixel + 0.5) / u_srcResolution;\n  vec4 minColor \x3d vec4(1.0);\n  vec4 maxColor \x3d vec4(0.0);\n  for (int y \x3d 0; y \x3c CELL_SIZE; ++y) {\n    for (int x \x3d 0; x \x3c CELL_SIZE; ++x) {\n      vec2 offset \x3d uv + vec2(x, y) * onePixel;\n      minColor \x3d min(minColor, texture2D(u_minTexture, offset));\n      maxColor \x3d max(maxColor, texture2D(u_maxTexture, offset));\n    }\n  }\n  gl_FragData[0] \x3d minColor;\n  gl_FragData[1] \x3d maxColor;\n}"}},
"drop-shadow":{composite:{"composite.frag":"precision mediump float;\nuniform sampler2D u_layerFBOTexture;\nuniform sampler2D u_blurTexture;\nuniform vec4 u_shadowColor;\nvarying vec2 v_uv;\nvoid main() {\n  vec4 layerColor \x3d texture2D(u_layerFBOTexture, v_uv);\n  vec4 blurColor \x3d texture2D(u_blurTexture, v_uv);\n  gl_FragColor \x3d ((1.0 - layerColor.a) * blurColor.a * u_shadowColor + layerColor);\n}"},"drop-shadow.vert":"precision mediump float;\nattribute vec2 a_position;\nuniform highp mat3 u_displayViewMat3;\nuniform highp vec2 u_offset;\nvarying vec2 v_uv;\nvoid main() {\n  vec3 offset \x3d u_displayViewMat3 * vec3(u_offset, 0.0);\n  gl_Position \x3d vec4(a_position, 0.0, 1.0) + vec4(offset, 0.0);\n  v_uv \x3d (a_position + 1.0) / 2.0;\n}"},
"edge-detect":{"frei-chen":{"frei-chen.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nuniform vec2 u_texSize;\nvarying vec2 v_uv;\nvec2 texel \x3d vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\nmat3 G[9];\nconst mat3 g0 \x3d mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 \x3d mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 \x3d mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 \x3d mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 \x3d mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 \x3d mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 \x3d mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 \x3d mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 \x3d mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\nvoid main() {\n  G[0] \x3d g0,\n  G[1] \x3d g1,\n  G[2] \x3d g2,\n  G[3] \x3d g3,\n  G[4] \x3d g4,\n  G[5] \x3d g5,\n  G[6] \x3d g6,\n  G[7] \x3d g7,\n  G[8] \x3d g8;\n  mat3 I;\n  float cnv[9];\n  vec3 sample;\n  for (float i \x3d 0.0; i \x3c 3.0; i++) {\n    for (float j \x3d 0.0; j \x3c 3.0; j++) {\n      sample \x3d texture2D(u_colorTexture, v_uv + texel * vec2(i - 1.0,j - 1.0)).rgb;\n      I[int(i)][int(j)] \x3d length(sample);\n    }\n  }\n  for (int i \x3d 0; i \x3c 9; i++) {\n    float dp3 \x3d dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\n    cnv[i] \x3d dp3 * dp3;\n  }\n  float M \x3d (cnv[0] + cnv[1]) + (cnv[2] + cnv[3]);\n  float S \x3d (cnv[4] + cnv[5]) + (cnv[6] + cnv[7]) + (cnv[8] + M);\n  gl_FragColor \x3d vec4(vec3(sqrt(M / S)), texture2D(u_colorTexture, v_uv).a);\n}"},
sobel:{"sobel.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nvarying vec2 v_uv;\nuniform vec2 u_texSize;\nvec2 texel \x3d vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\nmat3 G[2];\nconst mat3 g0 \x3d mat3( 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, -1.0, -2.0, -1.0 );\nconst mat3 g1 \x3d mat3( 1.0, 0.0, -1.0, 2.0, 0.0, -2.0, 1.0, 0.0, -1.0 );\nvoid main() {\n  mat3 I;\n  float cnv[2];\n  vec3 sample;\n  G[0] \x3d g0;\n  G[1] \x3d g1;\n  for (float i \x3d 0.0; i \x3c 3.0; i++) {\n    for (float j \x3d 0.0; j \x3c 3.0; j++) {\n      sample \x3d texture2D( u_colorTexture, v_uv + texel * vec2(i-1.0,j-1.0) ).rgb;\n      I[int(i)][int(j)] \x3d length(sample);\n    }\n  }\n  for (int i \x3d 0; i \x3c 2; i++) {\n    float dp3 \x3d dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\n    cnv[i] \x3d dp3 * dp3;\n  }\n  gl_FragColor \x3d vec4(vec3(0.5 * sqrt(cnv[0] * cnv[0] + cnv[1] * cnv[1])), texture2D(u_colorTexture, v_uv).a);\n}"}},
"edge-enhance":{"edge-enhance.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nvarying vec2 v_uv;\nuniform vec2 u_texSize;\nvec2 texel \x3d vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\nmat3 G[2];\nconst mat3 g0 \x3d mat3( 1.0, 0.0, -1.0, 1.0, 0.0, -1.0, 1.0, 0.0, -1.0 );\nconst mat3 g1 \x3d mat3( 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, -1.0, -1.0, -1.0 );\nvoid main() {\n  mat3 I;\n  float cnv[2];\n  vec3 sample;\n  G[0] \x3d g0;\n  G[1] \x3d g1;\n  for (float i \x3d 0.0; i \x3c 3.0; i++) {\n    for (float j \x3d 0.0; j \x3c 3.0; j++) {\n      sample \x3d texture2D( u_colorTexture, v_uv + texel * vec2(i-1.0,j-1.0) ).rgb;\n      I[int(i)][int(j)] \x3d length(sample);\n    }\n  }\n  for (int i \x3d 0; i \x3c 2; i++) {\n    float dp3 \x3d dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\n    cnv[i] \x3d dp3 * dp3;\n  }\n  vec4 color \x3d texture2D(u_colorTexture, v_uv);\n  gl_FragColor \x3d vec4(0.5 * sqrt(cnv[0] * cnv[0] + cnv[1] * cnv[1]) * color);\n}"},
filterEffect:{"filterEffect.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nuniform mat4 u_coefficients;\nvarying vec2 v_uv;\nvoid main() {\n  vec4 color \x3d texture2D(u_colorTexture, v_uv);\n  vec4 rgbw \x3d u_coefficients * vec4(color.a \x3e 0.0 ? color.rgb / color.a : vec3(0.0), 1.0);\n  float a \x3d color.a;\n  gl_FragColor \x3d vec4(a * rgbw.rgb, a);\n}"},pp:{"pp.vert":"precision mediump float;\nattribute vec2 a_position;\nvarying vec2 v_uv;\nvoid main() {\n  gl_Position \x3d vec4(a_position, 0.0, 1.0);\n  v_uv \x3d (a_position + 1.0) / 2.0;\n}"}},
raster:{bitmap:{"bitmap.frag":"precision mediump float;\nvarying highp vec2 v_texcoord;\nuniform sampler2D u_texture;\nuniform highp vec2 u_coordScale;\n#include \x3cfiltering/bicubic.glsl\x3e\nvoid main() {\n#ifdef BICUBIC\n  vec4 color \x3d sampleBicubicBSpline(u_texture, v_texcoord, u_coordScale);\n#else\n  vec4 color \x3d texture2D(u_texture, v_texcoord);\n#endif\n  gl_FragColor \x3d vec4(color.rgb * color.a, color.a);\n}","bitmap.vert":"precision mediump float;\nattribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\n  v_texcoord \x3d a_pos;\n  gl_Position \x3d vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\n}"},
common:{"common.glsl":"uniform sampler2D u_image;\nuniform int u_bandCount;\nuniform bool u_isFloatTexture;\nuniform bool u_flipY;\nuniform float u_opacity;\nuniform int u_resampling;\nuniform vec2 u_srcImageSize;\n#ifdef APPLY_PROJECTION\n#include \x3craster/common/projection.glsl\x3e\n#endif\n#ifdef BICUBIC\n#include \x3cfiltering/bicubic.glsl\x3e\n#endif\nvec2 getPixelLocation(vec2 coords) {\n  vec2 targetLocation \x3d u_flipY ? vec2(coords.s, 1.0 - coords.t) : coords;\n#ifdef APPLY_PROJECTION\n  targetLocation \x3d projectPixelLocation(targetLocation);\n#endif\n  return targetLocation;\n}\nbool isOutside(vec2 coords){\n   if (coords.t\x3e1.00001 ||coords.t\x3c-0.00001 || coords.s\x3e1.00001 ||coords.s\x3c-0.00001) {\n     return true;\n   } else {\n     return false;\n   }\n}\nvec4 getPixel(vec2 pixelLocation) {\n#ifdef BICUBIC\n  vec4 color \x3d sampleBicubicBSpline(u_image, pixelLocation, u_srcImageSize);\n#else\n  vec4 color \x3d texture2D(u_image, pixelLocation);\n#endif\n  return color;\n}",
"contrastBrightness.glsl":"uniform float u_contrastOffset;\nuniform float u_brightnessOffset;\nvec4 adjustContrastBrightness(vec4 currentPixel, bool isFloat) {\n  vec4 pixelValue \x3d isFloat ? currentPixel * 255.0 : currentPixel;\n  float maxI \x3d 255.0;\n  float mid \x3d 128.0;\n  float c \x3d u_contrastOffset;\n  float b \x3d u_brightnessOffset;\n  vec4 v;\n  if (c \x3e 0.0 \x26\x26 c \x3c 100.0) {\n    v \x3d (200.0 * pixelValue - 100.0 * maxI + 2.0 * maxI * b) / (2.0 * (100.0 - c)) + mid;\n  } else if (c \x3c\x3d 0.0 \x26\x26 c \x3e -100.0) {\n    v \x3d (200.0 * pixelValue - 100.0 * maxI + 2.0 * maxI * b) * (100.0 + c) / 20000.0 + mid;\n  } else if (c \x3d\x3d 100.0) {\n    v \x3d (200.0 * pixelValue - 100.0 * maxI + (maxI + 1.0) * (100.0 - c) + 2.0 * maxI * b);\n    v \x3d (sign(v) + 1.0) / 2.0;\n  } else if (c \x3d\x3d -100.0) {\n    v \x3d vec4(mid, mid, mid, currentPixel.a);\n  }\n  return vec4(v.r / 255.0, v.g / 255.0, v.b / 255.0, currentPixel.a);\n}",
"projection.glsl":"uniform sampler2D u_transformGrid;\nuniform vec2 u_transformSpacing;\nuniform vec2 u_transformGridSize;\nuniform vec2 u_targetImageSize;\nvec2 projectPixelLocation(vec2 coords) {\n  vec2 index_image \x3d floor(coords * u_targetImageSize);\n  vec2 oneTransformPixel \x3d vec2(0.25 / u_transformGridSize.s, 1.0 / u_transformGridSize.t);\n  vec2 index_transform \x3d floor(index_image / u_transformSpacing) / u_transformGridSize;\n  vec2 pos \x3d fract((index_image + vec2(0.5, 0.5)) / u_transformSpacing);\n  vec2 srcLocation;\n  vec2 transform_location \x3d index_transform + oneTransformPixel * 0.5;\n  if (pos.s \x3c\x3d pos.t) {\n    vec4 ll_abc \x3d texture2D(u_transformGrid, vec2(transform_location.s, transform_location.t));\n    vec4 ll_def \x3d texture2D(u_transformGrid, vec2(transform_location.s + oneTransformPixel.s, transform_location.t));\n    srcLocation.s \x3d dot(ll_abc.rgb, vec3(pos, 1.0));\n    srcLocation.t \x3d dot(ll_def.rgb, vec3(pos, 1.0));\n  } else {\n    vec4 ur_abc \x3d texture2D(u_transformGrid, vec2(transform_location.s + 2.0 * oneTransformPixel.s, transform_location.t));\n    vec4 ur_def \x3d texture2D(u_transformGrid, vec2(transform_location.s + 3.0 * oneTransformPixel.s, transform_location.t));\n    srcLocation.s \x3d dot(ur_abc.rgb, vec3(pos, 1.0));\n    srcLocation.t \x3d dot(ur_def.rgb, vec3(pos, 1.0));\n  }\n  return srcLocation;\n}"},
hillshade:{"hillshade.frag":"precision mediump float;\nvarying highp vec2 v_texcoord;\n#include \x3craster/common/common.glsl\x3e\nuniform int u_hillshadeType;\nuniform float u_sinZcosAs[6];\nuniform float u_sinZsinAs[6];\nuniform float u_cosZs[6];\nuniform float u_weights[6];\nuniform vec2 u_factor;\nuniform float u_minValue;\nuniform float u_maxValue;\n#include \x3craster/lut/colorize.glsl\x3e\nfloat getNeighborHoodAlpha(float a, float b, float c, float d, float e, float f, float g, float h, float i){\n  if (a \x3d\x3d 0.0 || a \x3d\x3d 0.0 || a\x3d\x3d0.0 || a \x3d\x3d 0.0 || a \x3d\x3d 0.0 || a\x3d\x3d0.0 || a \x3d\x3d 0.0 || a \x3d\x3d 0.0 || a\x3d\x3d0.0) {\n    return 0.0;\n  }\n  else {\n    return e;\n  }\n}\nvec3 rgb2hsv(vec3 c) {\n  vec4 K \x3d vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n  vec4 p \x3d c.g \x3c c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);\n  vec4 q \x3d c.r \x3c p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);\n  float d \x3d q.x - min(q.w, q.y);\n  float e \x3d 1.0e-10;\n  return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), min(d / (q.x + e), 1.0), q.x);\n}\nvec3 hsv2rgb(vec3 c) {\n  vec4 K \x3d vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p \x3d abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\nvec4 overlay(float val, float minValue, float maxValue, float hillshade) {\n  val \x3d clamp((val - minValue) / (maxValue - minValue), 0.0, 1.0);\n  vec4 rgb \x3d colorize(vec4(val, val, val, 1.0), 255.0);\n  vec3 hsv \x3d rgb2hsv(rgb.xyz);\n  hsv.z \x3d hillshade;\n  return vec4(hsv2rgb(hsv), 1.0) * rgb.a;\n}\nvoid main() {\n  vec2 pixelLocation \x3d getPixelLocation(v_texcoord);\n  if (isOutside(pixelLocation)) {\n     gl_FragColor \x3d vec4(0.0, 0.0, 0.0, 0.0);\n     return;\n  }\n  vec4 currentPixel \x3d getPixel(pixelLocation);\n  if (currentPixel.a \x3d\x3d 0.0) {\n    gl_FragColor \x3d vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n  }\n  vec2 axy \x3d vec2(-1.0, -1.0);\n  vec2 bxy \x3d vec2(0.0, -1.0);\n  vec2 cxy \x3d vec2(1.0, -1.0);\n  vec2 dxy \x3d vec2(-1.0, 0.0);\n  vec2 fxy \x3d vec2(1.0, 0.0);\n  vec2 gxy \x3d vec2(-1.0, 1.0);\n  vec2 hxy \x3d vec2(0.0, 1.0);\n  vec2 ixy \x3d vec2(1.0, 1.0);\n  vec2 onePixel \x3d 1.0 / u_srcImageSize;\n  if (pixelLocation.s \x3c onePixel.s) {\n    axy[0] \x3d 1.0;\n    dxy[0] \x3d 1.0;\n    gxy[0] \x3d 1.0;\n  }\n  if (pixelLocation.t \x3c onePixel.t) {\n    axy[1] \x3d 1.0;\n    bxy[1] \x3d 1.0;\n    cxy[1] \x3d 1.0;\n  }\n  if (pixelLocation.s \x3e 1.0 - onePixel.s) {\n    cxy[0] \x3d -1.0;\n    fxy[0] \x3d -1.0;\n    ixy[0] \x3d -1.0;\n  }\n  if (pixelLocation.t \x3e 1.0 - onePixel.t) {\n    gxy[1] \x3d -1.0;\n    hxy[1] \x3d -1.0;\n    ixy[1] \x3d -1.0;\n  }\n  vec4 va \x3d texture2D(u_image, pixelLocation + onePixel * axy);\n  vec4 vb \x3d texture2D(u_image, pixelLocation + onePixel * bxy);\n  vec4 vc \x3d texture2D(u_image, pixelLocation + onePixel * cxy);\n  vec4 vd \x3d texture2D(u_image, pixelLocation + onePixel * dxy);\n  vec4 ve \x3d texture2D(u_image, pixelLocation);\n  vec4 vf \x3d texture2D(u_image, pixelLocation + onePixel * fxy);\n  vec4 vg \x3d texture2D(u_image, pixelLocation + onePixel * gxy);\n  vec4 vh \x3d texture2D(u_image, pixelLocation + onePixel * hxy);\n  vec4 vi \x3d texture2D(u_image, pixelLocation + onePixel * ixy);\n  float dzx \x3d (vc + 2.0 * vf + vi - va - 2.0 * vd - vg).r * u_factor.s;\n  float dzy \x3d (vg + 2.0 * vh + vi - va - 2.0 * vb - vc).r * u_factor.t;\n  float dzd \x3d sqrt(1.0 + dzx * dzx + dzy * dzy);\n  float hillshade \x3d 0.0;\n  if (u_hillshadeType \x3d\x3d 0){\n\t   float cosDelta \x3d u_sinZsinAs[0] * dzy - u_sinZcosAs[0] * dzx;\n     float z \x3d (u_cosZs[0] + cosDelta) / dzd;\n     if (z \x3c 0.0)  z \x3d 0.0;\n\t   hillshade \x3d z;\n  } else {\n\t  for (int k \x3d 0; k \x3c 6; k++) {\n\t\t float cosDelta \x3d u_sinZsinAs[k] * dzy - u_sinZcosAs[k] * dzx;\n\t\t float z \x3d (u_cosZs[k] + cosDelta) / dzd;\n\t\t if (z \x3c 0.0) z \x3d 0.0;\n     hillshade \x3d hillshade + z * u_weights[k];\n\t\t if (k \x3d\x3d 5) break;\n    }\n  }\n  float alpha \x3d getNeighborHoodAlpha(va.a, vb.a, vc.a, vd.a, ve.a, vf.a, vg.a, vh.a, vi.a);\n#ifdef APPLY_COLORMAP\n  gl_FragColor \x3d overlay(ve.r, u_minValue, u_maxValue, hillshade) * alpha * u_opacity;\n#else\n  gl_FragColor \x3d vec4(hillshade, hillshade, hillshade, 1.0) * alpha * u_opacity;\n#endif\n}",
"hillshade.vert":"precision mediump float;\nattribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\n  v_texcoord \x3d a_pos;\n  gl_Position \x3d vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\n}"},lut:{"colorize.glsl":"uniform sampler2D u_colormap;\nuniform float u_colormapOffset;\nuniform float u_colormapMaxIndex;\nvec4 colorize(vec4 currentPixel, float scaleFactor) {\n  float clrIndex \x3d clamp(currentPixel.r * scaleFactor - u_colormapOffset, 0.0, u_colormapMaxIndex);\n  vec2 clrPosition \x3d vec2((clrIndex + 0.5) / (u_colormapMaxIndex + 1.0), 0.0);\n  vec4 color \x3d texture2D(u_colormap, clrPosition);\n  vec4 result \x3d vec4(color.rgb, color.a * currentPixel.a);\n  return result;\n}",
"lut.frag":"precision mediump float;\nvarying highp vec2 v_texcoord;\n#include \x3craster/common/common.glsl\x3e\n#include \x3craster/lut/colorize.glsl\x3e\nvoid main() {\n  vec2 pixelLocation \x3d getPixelLocation(v_texcoord);\n  if (isOutside(pixelLocation)) {\n     gl_FragColor \x3d vec4(0.0, 0.0, 0.0, 0.0);\n     return;\n  }\n  vec4 currentPixel \x3d getPixel(pixelLocation);\n  vec4 result \x3d colorize(currentPixel, 1.0);\n  gl_FragColor \x3d vec4(result.xyz, 1.0) * result.a * u_opacity;\n}",
"lut.vert":"precision mediump float;\nattribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nuniform highp float u_scale;\nuniform highp vec2 u_offset;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\n  v_texcoord \x3d a_pos * u_scale + u_offset;\n  gl_Position \x3d vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\n}"},stretch:{"stretch.frag":"precision mediump float;\nvarying highp vec2 v_texcoord;\n#include \x3craster/common/common.glsl\x3e\nuniform float u_minCutOff[3];\nuniform float u_maxCutOff[3];\nuniform float u_minOutput;\nuniform float u_maxOutput;\nuniform float u_factor[3];\nuniform bool u_useGamma;\nuniform float u_gamma[3];\nuniform float u_gammaCorrection[3];\n#include \x3craster/lut/colorize.glsl\x3e\nfloat stretchOneValue(float val, float minCutOff, float maxCutOff, float minOutput, float maxOutput, float factor, bool useGamma, float gamma, float gammaCorrection) {\n  if (val \x3e\x3d maxCutOff) {\n    return maxOutput;\n  } else if (val \x3c\x3d minCutOff) {\n    return minOutput;\n  }\n  float stretchedVal;\n  if (useGamma) {\n  \tfloat tempf \x3d 1.0;\n\t  float outRange \x3d maxOutput - minOutput;\n\t  float relativeVal \x3d (val - minCutOff) / (maxCutOff - minCutOff);\n\t  if (gamma \x3e 1.0) {\n      tempf -\x3d pow(1.0 / outRange, relativeVal * gammaCorrection);\n    }\n    stretchedVal \x3d (tempf * outRange * pow(relativeVal, 1.0 / gamma) + minOutput) / 255.0;\n  } else {\n    stretchedVal \x3d minOutput + (val - minCutOff) * factor;\n  }\n  return stretchedVal;\n}\nvoid main() {\n  vec2 pixelLocation \x3d getPixelLocation(v_texcoord);\n  if (isOutside(pixelLocation)) {\n     gl_FragColor \x3d vec4(0.0, 0.0, 0.0, 0.0);\n     return;\n  }\n  vec4 currentPixel \x3d getPixel(pixelLocation);\n  if (currentPixel.a \x3d\x3d 0.0) {\n    gl_FragColor \x3d vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n  }\n  if (u_bandCount \x3d\x3d 1) {\n    float grayVal \x3d stretchOneValue(currentPixel.r, u_minCutOff[0], u_maxCutOff[0], u_minOutput, u_maxOutput, u_factor[0], u_useGamma, u_gamma[0], u_gammaCorrection[0]);\n#ifdef APPLY_COLORMAP\n      vec4 result \x3d colorize(vec4(grayVal, grayVal, grayVal, 1.0), u_useGamma ? 255.0 : 1.0);\n      gl_FragColor \x3d vec4(result.xyz, 1.0) * result.a * currentPixel.a * u_opacity;\n#else\n      gl_FragColor \x3d vec4(grayVal, grayVal, grayVal, 1.0) * currentPixel.a * u_opacity;\n#endif\n  } else {\n    float redVal \x3d stretchOneValue(currentPixel.r, u_minCutOff[0], u_maxCutOff[0], u_minOutput, u_maxOutput, u_factor[0], u_useGamma, u_gamma[0], u_gammaCorrection[0]);\n    float greenVal \x3d stretchOneValue(currentPixel.g, u_minCutOff[1], u_maxCutOff[1], u_minOutput, u_maxOutput, u_factor[1], u_useGamma, u_gamma[1], u_gammaCorrection[1]);\n    float blueVal \x3d stretchOneValue(currentPixel.b, u_minCutOff[2], u_maxCutOff[2], u_minOutput, u_maxOutput, u_factor[2], u_useGamma, u_gamma[2], u_gammaCorrection[2]);\n    gl_FragColor \x3d vec4(redVal, greenVal, blueVal, 1.0) * currentPixel.a * u_opacity;\n  }\n}",
"stretch.vert":"precision mediump float;\nattribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nuniform highp float u_scale;\nuniform highp vec2 u_offset;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\n  v_texcoord \x3d a_pos * u_scale + u_offset;\n  gl_Position \x3d vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\n}"}},stencil:{"stencil.frag":"void main() {\n  gl_FragColor \x3d vec4(1.0, 1.0, 1.0, 1.0);\n}","stencil.vert":"attribute vec2 a_pos;\nvoid main() {\n  gl_Position \x3d vec4(a_pos, 0.0, 1.0);\n}"},
tileInfo:{"tileInfo.frag":"uniform mediump sampler2D u_texture;\nvarying mediump vec2 v_tex;\nvoid main(void) {\n  lowp vec4 color \x3d texture2D(u_texture, v_tex);\n  gl_FragColor \x3d 0.75 * color;\n}","tileInfo.vert":"attribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform mediump float u_depth;\nuniform mediump vec2 u_coord_ratio;\nuniform mediump vec2 u_delta;\nuniform mediump vec2 u_dimensions;\nvarying mediump vec2 v_tex;\nvoid main() {\n  mediump vec2 offset \x3d u_coord_ratio * vec2(u_delta + a_pos * u_dimensions);\n  vec3 v_pos \x3d u_dvsMat3 * vec3(offset, 1.0);\n  gl_Position \x3d vec4(v_pos.xy, 0.0, 1.0);\n  v_tex \x3d a_pos;\n}"},
util:{"encoding.glsl":"const vec4 rgba2float_factors \x3d vec4(\n    255.0 / (256.0),\n    255.0 / (256.0 * 256.0),\n    255.0 / (256.0 * 256.0 * 256.0),\n    255.0 / (256.0 * 256.0 * 256.0 * 256.0)\n  );\nfloat rgba2float(vec4 rgba) {\n  return dot(rgba, rgba2float_factors);\n}"}}});