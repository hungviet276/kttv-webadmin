// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.17/esri/copyright.txt for details.
//>>built
define(["require","exports","tslib","../../shaderModules/interfaces"],function(f,b,d,e){Object.defineProperty(b,"__esModule",{value:!0});b.Projection=void 0;b.Projection=function(a){a.fragment.uniforms.add("u_transformGrid","sampler2D");a.fragment.uniforms.add("u_transformSpacing","vec2");a.fragment.uniforms.add("u_transformGridSize","vec2");a.fragment.uniforms.add("u_targetImageSize","vec2");a.fragment.code.add(e.glsl(c||(c=d.__makeTemplateObject(["\n    vec2 projectPixelLocation(vec2 coords) {\n      // pixel index in row/column, corresponds to upperleft corner, e.g. [100, 20]\n      vec2 index_image \x3d floor(coords * u_targetImageSize);\n\n      // pixel's corresponding cell index in transform grid\n      // each transform cell corresponds to 4 pixels: 6 coefficients from lowerleft triangle followed by 6 coefficients from upperright triangle\n      vec2 oneTransformPixel \x3d vec2(0.25 / u_transformGridSize.s, 1.0 / u_transformGridSize.t);\n      vec2 index_transform \x3d floor(index_image / u_transformSpacing) / u_transformGridSize;\n\n      // correspoding position in transform grid cell, cell center coordinates\n      vec2 pos \x3d fract((index_image + vec2(0.5, 0.5)) / u_transformSpacing);\n      vec2 srcLocation;\n      // pixel's corresponding transform cell location, center cell coordinates\n      vec2 transform_location \x3d index_transform + oneTransformPixel * 0.5;\n\n      // use lower triangle or upper triangle\n      if (pos.s \x3c\x3d pos.t) {\n        vec4 ll_abc \x3d texture2D(u_transformGrid, vec2(transform_location.s, transform_location.t));\n        vec4 ll_def \x3d texture2D(u_transformGrid, vec2(transform_location.s + oneTransformPixel.s, transform_location.t));\n        srcLocation.s \x3d dot(ll_abc.rgb, vec3(pos, 1.0));\n        srcLocation.t \x3d dot(ll_def.rgb, vec3(pos, 1.0));\n      } else {\n        vec4 ur_abc \x3d texture2D(u_transformGrid, vec2(transform_location.s + 2.0 * oneTransformPixel.s, transform_location.t));\n        vec4 ur_def \x3d texture2D(u_transformGrid, vec2(transform_location.s + 3.0 * oneTransformPixel.s, transform_location.t));\n        srcLocation.s \x3d dot(ur_abc.rgb, vec3(pos, 1.0));\n        srcLocation.t \x3d dot(ur_def.rgb, vec3(pos, 1.0));\n      }\n      return srcLocation;;\n    }\n  "],
["\n    vec2 projectPixelLocation(vec2 coords) {\n      // pixel index in row/column, corresponds to upperleft corner, e.g. [100, 20]\n      vec2 index_image \x3d floor(coords * u_targetImageSize);\n\n      // pixel's corresponding cell index in transform grid\n      // each transform cell corresponds to 4 pixels: 6 coefficients from lowerleft triangle followed by 6 coefficients from upperright triangle\n      vec2 oneTransformPixel \x3d vec2(0.25 / u_transformGridSize.s, 1.0 / u_transformGridSize.t);\n      vec2 index_transform \x3d floor(index_image / u_transformSpacing) / u_transformGridSize;\n\n      // correspoding position in transform grid cell, cell center coordinates\n      vec2 pos \x3d fract((index_image + vec2(0.5, 0.5)) / u_transformSpacing);\n      vec2 srcLocation;\n      // pixel's corresponding transform cell location, center cell coordinates\n      vec2 transform_location \x3d index_transform + oneTransformPixel * 0.5;\n\n      // use lower triangle or upper triangle\n      if (pos.s \x3c\x3d pos.t) {\n        vec4 ll_abc \x3d texture2D(u_transformGrid, vec2(transform_location.s, transform_location.t));\n        vec4 ll_def \x3d texture2D(u_transformGrid, vec2(transform_location.s + oneTransformPixel.s, transform_location.t));\n        srcLocation.s \x3d dot(ll_abc.rgb, vec3(pos, 1.0));\n        srcLocation.t \x3d dot(ll_def.rgb, vec3(pos, 1.0));\n      } else {\n        vec4 ur_abc \x3d texture2D(u_transformGrid, vec2(transform_location.s + 2.0 * oneTransformPixel.s, transform_location.t));\n        vec4 ur_def \x3d texture2D(u_transformGrid, vec2(transform_location.s + 3.0 * oneTransformPixel.s, transform_location.t));\n        srcLocation.s \x3d dot(ur_abc.rgb, vec3(pos, 1.0));\n        srcLocation.t \x3d dot(ur_def.rgb, vec3(pos, 1.0));\n      }\n      return srcLocation;;\n    }\n  "]))))};
var c});