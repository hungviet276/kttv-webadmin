// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.17/esri/copyright.txt for details.
//>>built
define("require exports tslib ../../../../../../../geometry/support/geodesicConstants ./ComponentData.glsl ./VertexDiscardByOpacity.glsl ../../../../core/shaderLibrary/ForwardLinearDepth.glsl ../../../../core/shaderLibrary/Slice.glsl ../../../../core/shaderLibrary/attributes/TextureCoordinateAttribute.glsl ../../../../core/shaderLibrary/attributes/VertexColor.glsl ../../../../core/shaderLibrary/attributes/VertexNormal.glsl ../../../../core/shaderLibrary/attributes/VertexPosition.glsl ../../../../core/shaderLibrary/output/OutputDepth.glsl ../../../../core/shaderLibrary/output/OutputHighlight.glsl ../../../../core/shaderLibrary/shading/ComputeMaterialColor.glsl ../../../../core/shaderLibrary/shading/ComputeNormalTexture.glsl ../../../../core/shaderLibrary/shading/ComputeShadingNormal.glsl ../../../../core/shaderLibrary/shading/EvaluateSceneLighting.glsl ../../../../core/shaderLibrary/shading/PhysicallyBasedRenderingParameters.glsl ../../../../core/shaderLibrary/shading/ReadBaseColorTexture.glsl ../../../../core/shaderLibrary/shading/ReadShadowMap.glsl ../../../../core/shaderLibrary/terrain/Overlay.glsl ../../../../core/shaderLibrary/util/AlphaDiscard.glsl ../../../../core/shaderModules/interfaces ../../../../core/shaderModules/ShaderBuilder".split(" "),
function(la,e,d,S,T,U,V,W,X,Y,Z,aa,ba,ca,da,ea,f,fa,ga,ha,ia,ja,g,c,ka){Object.defineProperty(e,"__esModule",{value:!0});e.build=e.attributeLocations=void 0;e.attributeLocations={position:0,normal:1,normalCompressed:1,color:2,uv0:3,uvRegion:4,componentIndex:5};e.build=function(b){var a=new ka.ShaderBuilder;a.include(aa.VertexPosition,b);a.include(Z.VertexNormal,b);a.include(Y.VertexColor,b);a.include(X.TextureCoordinateAttribute,b);a.include(V.ForwardLinearDepth,b);a.include(T.ComponentData,b);a.include(g.DiscardOrAdjustAlpha,
b);a.include(W.Slice,b);a.include(ha.ReadBaseColorTexture,b);a.include(U.VertexDiscardByOpacity,b);a.fragment.uniforms.add("view","mat4");if(1===b.pbrMode||2===b.pbrMode)a.include(ga.PhysicallyBasedRenderingParameters,b),a.include(ea.ComputeNormalTexture,b);3===b.output&&1===b.componentData?a.vertex.code.add(c.glsl(h||(h=d.__makeTemplateObject(["\n      #define discardShadows(castShadows) { if(!castShadows) { gl_Position \x3d vec4(1e38, 1e38, 1e38, 1.0); return; } }\n    "],["\n      #define discardShadows(castShadows) { if(!castShadows) { gl_Position \x3d vec4(1e38, 1e38, 1e38, 1.0); return; } }\n    "])))):
a.vertex.code.add(c.glsl(k||(k=d.__makeTemplateObject(["\n      #define discardShadows(castShadows) {}\n    "],["\n      #define discardShadows(castShadows) {}\n    "]))));var e=b.overlayEnabled&&0===b.output&&4===b.pbrMode;b.overlayEnabled&&(a.include(ja.Overlay,b),1===b.viewingMode?a.vertex.code.add(c.glsl(l||(l=d.__makeTemplateObject(["\n      const float invEarthRadius \x3d ",";\n      vec2 projectOverlay(vec3 pos) {\n        return pos.xy / (1.0 + invEarthRadius * pos.z);\n      }\n      "],
["\n      const float invEarthRadius \x3d ",";\n      vec2 projectOverlay(vec3 pos) {\n        return pos.xy / (1.0 + invEarthRadius * pos.z);\n      }\n      "])),c.glsl.float(1/S.earthRadius))):a.vertex.code.add(c.glsl(m||(m=d.__makeTemplateObject(["\n      vec2 projectOverlay(vec3 pos) { return pos.xy; }\n      "],["\n      vec2 projectOverlay(vec3 pos) { return pos.xy; }\n      "])))));e&&(a.varyings.add("tbnTangent","vec3"),a.varyings.add("tbnBiTangent","vec3"),a.varyings.add("groundNormal",
"vec3"),a.varyings.add("positionView","vec3"));a.vertex.code.add(c.glsl(n||(n=d.__makeTemplateObject(["\n    void main() {\n      bool castShadows;\n      vec4 externalColor \x3d forwardExternalColor(castShadows);\n      discardShadows(castShadows);\n\n      vertexDiscardByOpacity(externalColor.a);\n\n      if (externalColor.a \x3c ",") {\n        // Discard this vertex\n        gl_Position \x3d vec4(1e38, 1e38, 1e38, 1.0);\n        return;\n      }\n      forwardPosition();\n      forwardNormal();\n      ",
"\n\n      ","\n      forwardTextureCoordinates();\n      forwardVertexColor();\n      forwardLinearDepth(); // depends on forwardPosition()\n    }\n  "],["\n    void main() {\n      bool castShadows;\n      vec4 externalColor \x3d forwardExternalColor(castShadows);\n      discardShadows(castShadows);\n\n      vertexDiscardByOpacity(externalColor.a);\n\n      if (externalColor.a \x3c ",") {\n        // Discard this vertex\n        gl_Position \x3d vec4(1e38, 1e38, 1e38, 1.0);\n        return;\n      }\n      forwardPosition();\n      forwardNormal();\n      ",
"\n\n      ","\n      forwardTextureCoordinates();\n      forwardVertexColor();\n      forwardLinearDepth(); // depends on forwardPosition()\n    }\n  "])),c.glsl.float(g.symbolAlphaCutoff),e?c.glsl(p||(p=d.__makeTemplateObject(["\n        positionView \x3d position_view();\n        ","\n        "],["\n        positionView \x3d position_view();\n        ","\n        "])),1===b.viewingMode?c.glsl(q||(q=d.__makeTemplateObject(["\n        groundNormal \x3d normalize(positionWorld());\n        tbnTangent \x3d normalize(cross(vec3(0.0, 0.0, 1.0), groundNormal));\n        tbnBiTangent \x3d normalize(cross(groundNormal, tbnTangent));"],
["\n        groundNormal \x3d normalize(positionWorld());\n        tbnTangent \x3d normalize(cross(vec3(0.0, 0.0, 1.0), groundNormal));\n        tbnBiTangent \x3d normalize(cross(groundNormal, tbnTangent));"]))):c.glsl(r||(r=d.__makeTemplateObject(["\n        groundNormal \x3d vec3(0.0, 0.0, 1.0);\n        tbnTangent \x3d vec3(1.0, 0.0, 0.0);\n        tbnBiTangent \x3d normalize(cross(groundNormal, tbnTangent));"],["\n        groundNormal \x3d vec3(0.0, 0.0, 1.0);\n        tbnTangent \x3d vec3(1.0, 0.0, 0.0);\n        tbnBiTangent \x3d normalize(cross(groundNormal, tbnTangent));"])))):
"",b.overlayEnabled?c.glsl(t||(t=d.__makeTemplateObject(["setOverlayVTC(projectOverlay(position));"],["setOverlayVTC(projectOverlay(position));"]))):""));0===b.output&&(a.include(da.ComputeMaterialColor,b),a.include(f.ComputeShadingNormal,b),a.include(fa.EvaluateSceneLighting,b),e&&(a.fragment.uniforms.add("ovInnerNormalTex","sampler2D"),a.fragment.uniforms.add("ovOuterNormalTex","sampler2D")),b.receiveShadows?(a.include(ia.ReadShadowMap,b),a.fragment.code.add(c.glsl(u||(u=d.__makeTemplateObject(["\n        float evaluateShadow() {\n          return readShadowMap(vPositionWorldCameraRelative, linearDepth);\n        }\n      "],
["\n        float evaluateShadow() {\n          return readShadowMap(vPositionWorldCameraRelative, linearDepth);\n        }\n      "]))))):a.fragment.code.add(c.glsl(v||(v=d.__makeTemplateObject(["\n        float evaluateShadow() { return 0.0; }\n      "],["\n        float evaluateShadow() { return 0.0; }\n      "])))),a.fragment.code.add(c.glsl(w||(w=d.__makeTemplateObject(["\n      void main() {\n        discardBySlice(vPositionWorldCameraRelative);\n\n        vec4 textureColor \x3d readBaseColorTexture();\n        discardOrAdjustAlpha(textureColor);\n\n        vec4 externalColor;\n        int externalColorMixMode;\n        readExternalColor(externalColor, externalColorMixMode);\n\n        vec4 materialColor \x3d computeMaterialColor(\n          textureColor,\n          externalColor,\n          externalColorMixMode\n        );\n        ",
"\n    "],["\n      void main() {\n        discardBySlice(vPositionWorldCameraRelative);\n\n        vec4 textureColor \x3d readBaseColorTexture();\n        discardOrAdjustAlpha(textureColor);\n\n        vec4 externalColor;\n        int externalColorMixMode;\n        readExternalColor(externalColor, externalColorMixMode);\n\n        vec4 materialColor \x3d computeMaterialColor(\n          textureColor,\n          externalColor,\n          externalColorMixMode\n        );\n        ","\n    "])),b.overlayEnabled?
c.glsl(x||(x=d.__makeTemplateObject(["\n        vec4 overlayColorOpaque \x3d getOverlayColor(ovInnerColorTex, ovOuterColorTex, vtcOverlay);\n        vec4 overlayColor \x3d overlayOpacity * overlayColorOpaque;\n        materialColor \x3d materialColor * (1.0 - overlayColor.a) + overlayColor;"],["\n        vec4 overlayColorOpaque \x3d getOverlayColor(ovInnerColorTex, ovOuterColorTex, vtcOverlay);\n        vec4 overlayColor \x3d overlayOpacity * overlayColorOpaque;\n        materialColor \x3d materialColor * (1.0 - overlayColor.a) + overlayColor;"]))):
"")),b.alphaPass?a.fragment.code.add(c.glsl(y||(y=d.__makeTemplateObject(["\n        gl_FragColor \x3d materialColor.aaaa;\n      }\n    "],["\n        gl_FragColor \x3d materialColor.aaaa;\n      }\n    "])))):(1===b.pbrMode||2===b.pbrMode?(a.fragment.code.add(c.glsl(z||(z=d.__makeTemplateObject(["\n        ","\n        vec3 normalVertex \x3d shadingNormalWorld();\n        float additionalIrradiance \x3d 0.02 * lightingMainIntensity[2];\n      "],["\n        ","\n        vec3 normalVertex \x3d shadingNormalWorld();\n        float additionalIrradiance \x3d 0.02 * lightingMainIntensity[2];\n      "])),
1===b.pbrMode?c.glsl(A||(A=d.__makeTemplateObject(["\n        applyPBRFactors();\n        if (int(externalColorMixMode) \x3d\x3d 3) {\n          mrr \x3d vec3(0.0, 0.6, 0.2);\n        }"],["\n        applyPBRFactors();\n        if (int(externalColorMixMode) \x3d\x3d 3) {\n          mrr \x3d vec3(0.0, 0.6, 0.2);\n        }"]))):"")),b.hasNormalTexture?a.fragment.code.add(c.glsl(B||(B=d.__makeTemplateObject(["\n        mat3 tangentSpace \x3d computeTangentSpace(normalVertex, vPositionWorldCameraRelative, vuv0);\n        vec3 shadingNormal \x3d computeTextureNormal(tangentSpace, vuv0);\n        "],
["\n        mat3 tangentSpace \x3d computeTangentSpace(normalVertex, vPositionWorldCameraRelative, vuv0);\n        vec3 shadingNormal \x3d computeTextureNormal(tangentSpace, vuv0);\n        "])))):a.fragment.code.add(c.glsl(C||(C=d.__makeTemplateObject(["\n        vec3 shadingNormal \x3d normalVertex;\n        "],["\n        vec3 shadingNormal \x3d normalVertex;\n        "])))),a.fragment.code.add(c.glsl(D||(D=d.__makeTemplateObject(["","\n      "],["","\n      "])),1===b.viewingMode?c.glsl(E||(E=
d.__makeTemplateObject(["vec3 normalGround \x3d normalize(positionWorld());"],["vec3 normalGround \x3d normalize(positionWorld());"]))):c.glsl(F||(F=d.__makeTemplateObject(["vec3 normalGround \x3d vec3(0.0, 0.0, 1.0);"],["vec3 normalGround \x3d vec3(0.0, 0.0, 1.0);"]))))),a.fragment.code.add(c.glsl(G||(G=d.__makeTemplateObject(["\n        vec3 viewDir \x3d normalize(vPositionWorldCameraRelative);\n        float ssao \x3d 1.0 - occlusion * (1.0 - evaluateAmbientOcclusion());\n        vec3 additionalLight \x3d evaluateAdditionalLighting(ssao, positionWorld());\n        vec4 shadedColor \x3d vec4(evaluateSceneLightingPBR(shadingNormal, materialColor.rgb, evaluateShadow(), ssao, additionalLight, viewDir, normalGround, mrr, emission, additionalIrradiance), materialColor.a);\n        "],
["\n        vec3 viewDir \x3d normalize(vPositionWorldCameraRelative);\n        float ssao \x3d 1.0 - occlusion * (1.0 - evaluateAmbientOcclusion());\n        vec3 additionalLight \x3d evaluateAdditionalLighting(ssao, positionWorld());\n        vec4 shadedColor \x3d vec4(evaluateSceneLightingPBR(shadingNormal, materialColor.rgb, evaluateShadow(), ssao, additionalLight, viewDir, normalGround, mrr, emission, additionalIrradiance), materialColor.a);\n        "]))))):(b.receiveShadows?a.fragment.code.add(c.glsl(H||
(H=d.__makeTemplateObject(["\n      float shadow \x3d evaluateShadow();\n        "],["\n      float shadow \x3d evaluateShadow();\n        "])))):1===b.viewingMode?a.fragment.code.add(c.glsl(I||(I=d.__makeTemplateObject(["\n      float additionalAmbientScale \x3d _oldHeuristicLighting(positionWorld());\n      float shadow \x3d lightingGlobalFactor * (1.0 - additionalAmbientScale);\n        "],["\n      float additionalAmbientScale \x3d _oldHeuristicLighting(positionWorld());\n      float shadow \x3d lightingGlobalFactor * (1.0 - additionalAmbientScale);\n        "])))):
a.fragment.code.add(c.glsl(J||(J=d.__makeTemplateObject(["\n      float shadow \x3d 0.0;\n      "],["\n      float shadow \x3d 0.0;\n      "])))),a.fragment.code.add(c.glsl(K||(K=d.__makeTemplateObject(["\n      float ambientOcclusion \x3d evaluateAmbientOcclusion();\n      // At global scale we create some additional ambient light based on the main light to simulate global illumination\n      vec3 additionalLight \x3d evaluateAdditionalLighting(ambientOcclusion, positionWorld());\n      vec4 shadedColor \x3d vec4(evaluateSceneLighting(shadingNormalWorld(), materialColor.rgb, shadow, ambientOcclusion, additionalLight), materialColor.a);\n      ",
"\n      "],["\n      float ambientOcclusion \x3d evaluateAmbientOcclusion();\n      // At global scale we create some additional ambient light based on the main light to simulate global illumination\n      vec3 additionalLight \x3d evaluateAdditionalLighting(ambientOcclusion, positionWorld());\n      vec4 shadedColor \x3d vec4(evaluateSceneLighting(shadingNormalWorld(), materialColor.rgb, shadow, ambientOcclusion, additionalLight), materialColor.a);\n      ","\n      "])),e?c.glsl(L||(L=d.__makeTemplateObject(["\n          vec4 overlayWaterMask \x3d getOverlayColor(ovInnerNormalTex, ovOuterNormalTex, vtcOverlay);\n          float waterNormalLength \x3d length(overlayWaterMask);\n          if (waterNormalLength \x3e 0.95) {\n            mat3 tbnMatrix \x3d mat3(tbnTangent, tbnBiTangent, groundNormal);\n            vec4 waterOverlayColor \x3d vec4(overlayColorOpaque.xyz, overlayColor.w);\n            vec4 waterColorLinear \x3d getOverlayWaterColor(overlayWaterMask, waterOverlayColor, -normalize(vPositionWorldCameraRelative), shadow, groundNormal, tbnMatrix, positionView);\n            vec4 waterColorNonLinear \x3d delinearizeGamma(vec4(waterColorLinear.xyz, 1.0));\n            // un-gamma the ground color to mix in linear space\n            shadedColor \x3d mix(shadedColor, waterColorNonLinear, waterColorLinear.w);\n          }"],
["\n          vec4 overlayWaterMask \x3d getOverlayColor(ovInnerNormalTex, ovOuterNormalTex, vtcOverlay);\n          float waterNormalLength \x3d length(overlayWaterMask);\n          if (waterNormalLength \x3e 0.95) {\n            mat3 tbnMatrix \x3d mat3(tbnTangent, tbnBiTangent, groundNormal);\n            vec4 waterOverlayColor \x3d vec4(overlayColorOpaque.xyz, overlayColor.w);\n            vec4 waterColorLinear \x3d getOverlayWaterColor(overlayWaterMask, waterOverlayColor, -normalize(vPositionWorldCameraRelative), shadow, groundNormal, tbnMatrix, positionView);\n            vec4 waterColorNonLinear \x3d delinearizeGamma(vec4(waterColorLinear.xyz, 1.0));\n            // un-gamma the ground color to mix in linear space\n            shadedColor \x3d mix(shadedColor, waterColorNonLinear, waterColorLinear.w);\n          }"]))):
""))),a.fragment.code.add(c.glsl(M||(M=d.__makeTemplateObject(["\n        gl_FragColor \x3d highlightSlice(shadedColor, vPositionWorldCameraRelative);\n        ","\n      }\n    "],["\n        gl_FragColor \x3d highlightSlice(shadedColor, vPositionWorldCameraRelative);\n        ","\n      }\n    "])),b.OITEnabled?c.glsl(N||(N=d.__makeTemplateObject(["\n          //For order-independent transparency we need to sum together colors premultiplied with alpha. For opaque rendering this has no effect.\n          gl_FragColor.rgb *\x3d shadedColor.a;\n        "],
["\n          //For order-independent transparency we need to sum together colors premultiplied with alpha. For opaque rendering this has no effect.\n          gl_FragColor.rgb *\x3d shadedColor.a;\n        "]))):""))));if(1===b.output||3===b.output)a.include(ba.OutputDepth,b),a.fragment.code.add(c.glsl(O||(O=d.__makeTemplateObject(["\n      void main() {\n        discardBySlice(vPositionWorldCameraRelative);\n\n        vec4 textureColor \x3d readBaseColorTexture();\n        discardOrAdjustAlpha(textureColor);\n\n        outputDepth(linearDepth);\n      }\n    "],
["\n      void main() {\n        discardBySlice(vPositionWorldCameraRelative);\n\n        vec4 textureColor \x3d readBaseColorTexture();\n        discardOrAdjustAlpha(textureColor);\n\n        outputDepth(linearDepth);\n      }\n    "]))));2===b.output&&(a.include(f.ComputeShadingNormal,b),a.fragment.code.add(c.glsl(P||(P=d.__makeTemplateObject(["\n      void main() {\n        discardBySlice(vPositionWorldCameraRelative);\n\n        vec4 textureColor \x3d readBaseColorTexture();\n        discardOrAdjustAlpha(textureColor);\n\n        // note: the alpha component needs to be 1.0 in order for this material\n        // to influence ambient occlusion, see the ssao fragment shader\n        float alpha \x3d ",
";\n        gl_FragColor \x3d vec4(vec3(.5) + .5 * shadingNormal_view(), alpha);\n      }\n    "],["\n      void main() {\n        discardBySlice(vPositionWorldCameraRelative);\n\n        vec4 textureColor \x3d readBaseColorTexture();\n        discardOrAdjustAlpha(textureColor);\n\n        // note: the alpha component needs to be 1.0 in order for this material\n        // to influence ambient occlusion, see the ssao fragment shader\n        float alpha \x3d ",";\n        gl_FragColor \x3d vec4(vec3(.5) + .5 * shadingNormal_view(), alpha);\n      }\n    "])),
2===b.normalType?"0.0":"1.0")));4===b.output&&(a.include(ca.OutputHighlight),a.fragment.code.add(c.glsl(Q||(Q=d.__makeTemplateObject(["\n      void main() {\n        discardBySlice(vPositionWorldCameraRelative);\n\n        vec4 textureColor \x3d readBaseColorTexture();\n        discardOrAdjustAlpha(textureColor);\n\n        ","\n\n        outputHighlight();\n      }\n    "],["\n      void main() {\n        discardBySlice(vPositionWorldCameraRelative);\n\n        vec4 textureColor \x3d readBaseColorTexture();\n        discardOrAdjustAlpha(textureColor);\n\n        ",
"\n\n        outputHighlight();\n      }\n    "])),b.overlayEnabled?c.glsl(R||(R=d.__makeTemplateObject(["\n        vec4 overlayColor \x3d getCombinedOverlayColor();\n\n        if (overlayColor.a \x3d\x3d 0.0) {\n          gl_FragColor \x3d vec4(0.0);\n          return;\n        }"],["\n        vec4 overlayColor \x3d getCombinedOverlayColor();\n\n        if (overlayColor.a \x3d\x3d 0.0) {\n          gl_FragColor \x3d vec4(0.0);\n          return;\n        }"]))):"")));return a};var h,k,l,m,q,r,p,
t,n,u,v,x,w,y,A,z,B,C,E,F,D,G,H,I,J,L,K,N,M,O,P,R,Q});