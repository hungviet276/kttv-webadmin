// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.17/esri/copyright.txt for details.
//>>built
define("require exports tslib ../../../core/shaderLibrary/util/RgbaFloatEncoding.glsl ../../../core/shaderModules/interfaces ./EdgeUtil.glsl ./UnpackAttributes.glsl".split(" "),function(v,c,a,r,b,t,u){Object.defineProperty(c,"__esModule",{value:!0});c.LineOffset=void 0;c.LineOffset=function(e,c){var d=e.vertex;e.include(u.UnpackAttributes,c);var f=e.fragment;t.EdgeUtil.usesSketchLogic(c)&&(d.uniforms.add("uStrokesTextureScale","vec2"),d.uniforms.add("uStrokesLog2Resolution","float"),d.uniforms.add("uStrokeVariants",
"float"),e.varyings.add("vStrokeUV","vec2"),f.uniforms.add("uStrokesTexture","sampler2D"),f.uniforms.add("uStrokesNormalizationScale","float"),d.code.add(b.glsl(g||(g=a.__makeTemplateObject(["\n      void calculateStyleOutputsSketch(float lineLength, UnpackedAttributes unpackedAttributes) {\n        vec2 sidenessNorm \x3d unpackedAttributes.sidenessNorm;\n\n        float lineIndex \x3d clamp(ceil(log2(lineLength)), 0.0, uStrokesLog2Resolution);\n\n        vStrokeUV \x3d vec2(exp2(lineIndex) * sidenessNorm.y, lineIndex * uStrokeVariants + variantStroke + 0.5) * uStrokesTextureScale;\n        vStrokeUV.x +\x3d variantOffset;\n      }\n    "],
["\n      void calculateStyleOutputsSketch(float lineLength, UnpackedAttributes unpackedAttributes) {\n        vec2 sidenessNorm \x3d unpackedAttributes.sidenessNorm;\n\n        float lineIndex \x3d clamp(ceil(log2(lineLength)), 0.0, uStrokesLog2Resolution);\n\n        vStrokeUV \x3d vec2(exp2(lineIndex) * sidenessNorm.y, lineIndex * uStrokeVariants + variantStroke + 0.5) * uStrokesTextureScale;\n        vStrokeUV.x +\x3d variantOffset;\n      }\n    "])))),e.fragment.include(r.RgbaFloatEncoding),
f.code.add(b.glsl(h||(h=a.__makeTemplateObject(["\n      float calculateLineOffsetSketch() {\n        float offsetNorm \x3d rgba2float(texture2D(uStrokesTexture, vStrokeUV));\n        return (offsetNorm - 0.5) * uStrokesNormalizationScale;\n      }\n\n      float calculateLinePressureSketch() {\n        return rgba2float(texture2D(uStrokesTexture, vStrokeUV + vec2(0.0, 0.5)));\n      }\n    "],["\n      float calculateLineOffsetSketch() {\n        float offsetNorm \x3d rgba2float(texture2D(uStrokesTexture, vStrokeUV));\n        return (offsetNorm - 0.5) * uStrokesNormalizationScale;\n      }\n\n      float calculateLinePressureSketch() {\n        return rgba2float(texture2D(uStrokesTexture, vStrokeUV + vec2(0.0, 0.5)));\n      }\n    "])))));
switch(c.mode){case 0:d.code.add(b.glsl(k||(k=a.__makeTemplateObject(["\n        void calculateStyleOutputs(UnpackedAttributes unpackedAttributes) {}\n      "],["\n        void calculateStyleOutputs(UnpackedAttributes unpackedAttributes) {}\n      "]))));f.code.add(b.glsl(l||(l=a.__makeTemplateObject(["\n        float calculateLineOffset() {\n          return 0.0;\n        }\n\n        float calculateLinePressure() {\n          return 1.0;\n        }\n      "],["\n        float calculateLineOffset() {\n          return 0.0;\n        }\n\n        float calculateLinePressure() {\n          return 1.0;\n        }\n      "]))));
break;case 1:d.code.add(b.glsl(m||(m=a.__makeTemplateObject(["\n        void calculateStyleOutputs(UnpackedAttributes unpackedAttributes)\n        {\n          calculateStyleOutputsSketch(vLineLengthPixels, unpackedAttributes);\n        }\n      "],["\n        void calculateStyleOutputs(UnpackedAttributes unpackedAttributes)\n        {\n          calculateStyleOutputsSketch(vLineLengthPixels, unpackedAttributes);\n        }\n      "]))));f.code.add(b.glsl(n||(n=a.__makeTemplateObject(["\n        float calculateLineOffset() {\n          return calculateLineOffsetSketch();\n        }\n\n        float calculateLinePressure() {\n          return calculateLinePressureSketch();\n        }\n      "],
["\n        float calculateLineOffset() {\n          return calculateLineOffsetSketch();\n        }\n\n        float calculateLinePressure() {\n          return calculateLinePressureSketch();\n        }\n      "]))));break;case 2:e.varyings.add("vType","float"),d.code.add(b.glsl(p||(p=a.__makeTemplateObject(["\n        void calculateStyleOutputs(UnpackedAttributes unpackedAttributes)\n        {\n          vType \x3d unpackedAttributes.type;\n\n          if (unpackedAttributes.type \x3c\x3d 0.0) {\n            calculateStyleOutputsSketch(vLineLengthPixels, unpackedAttributes);\n          }\n        }\n      "],
["\n        void calculateStyleOutputs(UnpackedAttributes unpackedAttributes)\n        {\n          vType \x3d unpackedAttributes.type;\n\n          if (unpackedAttributes.type \x3c\x3d 0.0) {\n            calculateStyleOutputsSketch(vLineLengthPixels, unpackedAttributes);\n          }\n        }\n      "])))),f.code.add(b.glsl(q||(q=a.__makeTemplateObject(["\n        float calculateLineOffset() {\n          if (vType \x3c\x3d 0.0) {\n            return calculateLineOffsetSketch();\n          }\n          else {\n            return 0.0;\n          }\n        }\n\n        float calculateLinePressure() {\n          if (vType \x3c\x3d 0.0) {\n            return calculateLinePressureSketch();\n          }\n          else {\n            return 1.0;\n          }\n        }\n      "],
["\n        float calculateLineOffset() {\n          if (vType \x3c\x3d 0.0) {\n            return calculateLineOffsetSketch();\n          }\n          else {\n            return 0.0;\n          }\n        }\n\n        float calculateLinePressure() {\n          if (vType \x3c\x3d 0.0) {\n            return calculateLinePressureSketch();\n          }\n          else {\n            return 1.0;\n          }\n        }\n      "]))))}};var g,h,k,l,m,n,p,q});