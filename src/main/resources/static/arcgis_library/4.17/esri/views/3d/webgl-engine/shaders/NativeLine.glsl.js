// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.17/esri/copyright.txt for details.
//>>built
define("require exports tslib ../core/shaderLibrary/Slice.glsl ../core/shaderLibrary/Transform.glsl ../core/shaderLibrary/attributes/VertexColor.glsl ../core/shaderLibrary/output/OutputHighlight.glsl ../core/shaderLibrary/shading/LineStipple.glsl ../core/shaderLibrary/util/AlphaDiscard.glsl ../core/shaderModules/interfaces ../core/shaderModules/ShaderBuilder".split(" "),function(w,e,d,n,p,q,r,t,u,c,v){Object.defineProperty(e,"__esModule",{value:!0});e.build=void 0;e.build=function(b){var a=new v.ShaderBuilder;
a.include(p.Transform,{linearDepth:!1});a.include(q.VertexColor,b);a.include(t.LineStipple,b);a.vertex.uniforms.add("proj","mat4").add("view","mat4");a.attributes.add("position","vec3");a.varyings.add("vpos","vec3");a.vertex.code.add(c.glsl(f||(f=d.__makeTemplateObject(["\n    void main(void) {\n      vpos \x3d position;\n      forwardNormalizedVertexColor();\n      gl_Position \x3d transformPosition(proj, view, vpos);\n  "],["\n    void main(void) {\n      vpos \x3d position;\n      forwardNormalizedVertexColor();\n      gl_Position \x3d transformPosition(proj, view, vpos);\n  "]))));
b.stippleEnabled&&(a.attributes.add("auxpos1","vec3"),a.vertex.uniforms.add("ndcToPixel","vec2"),a.vertex.code.add(c.glsl(g||(g=d.__makeTemplateObject(["\n    vec4 vpos2 \x3d transformPosition(proj, view, auxpos1);\n    float lineSegmentPixelSize \x3d length((vpos2.xy / vpos2.w - gl_Position.xy / gl_Position.w) * ndcToPixel);\n\n    stipplePatternUv \x3d lineSegmentPixelSize * stipplePatternPixelSizeInv;\n    ","\n\n    // Cancel out perspective correct interpolation because we want this length the really represent\n    // the screen distance\n    stipplePatternUv *\x3d gl_Position.w;\n    "],
["\n    vec4 vpos2 \x3d transformPosition(proj, view, auxpos1);\n    float lineSegmentPixelSize \x3d length((vpos2.xy / vpos2.w - gl_Position.xy / gl_Position.w) * ndcToPixel);\n\n    stipplePatternUv \x3d lineSegmentPixelSize * stipplePatternPixelSizeInv;\n    ","\n\n    // Cancel out perspective correct interpolation because we want this length the really represent\n    // the screen distance\n    stipplePatternUv *\x3d gl_Position.w;\n    "])),b.stippleIntegerRepeatsEnabled?"stipplePatternUv \x3d floor(stipplePatternUv + 0.5);":
"")));a.vertex.code.add(c.glsl(h||(h=d.__makeTemplateObject(["\n  }\n  "],["\n  }\n  "]))));4===b.output&&a.include(r.OutputHighlight);a.include(n.Slice,b);a.fragment.uniforms.add("constantColor","vec4").add("alphaCoverage","float");a.fragment.code.add(c.glsl(k||(k=d.__makeTemplateObject(["\n  void main() {\n    discardBySlice(vpos);\n\n    vec4 color \x3d ",";\n\n    float stippleAlpha \x3d getStippleAlpha();\n    discardByStippleAlpha(stippleAlpha, STIPPLE_ALPHA_COLOR_DISCARD);\n\n    vec4 finalColor \x3d blendStipple(vec4(color.rgb, color.a * alphaCoverage), stippleAlpha);\n\n    if (finalColor.a \x3c ",
") {\n      discard;\n    }\n\n    ","\n    ","\n  }\n  "],["\n  void main() {\n    discardBySlice(vpos);\n\n    vec4 color \x3d ",";\n\n    float stippleAlpha \x3d getStippleAlpha();\n    discardByStippleAlpha(stippleAlpha, STIPPLE_ALPHA_COLOR_DISCARD);\n\n    vec4 finalColor \x3d blendStipple(vec4(color.rgb, color.a * alphaCoverage), stippleAlpha);\n\n    if (finalColor.a \x3c ",") {\n      discard;\n    }\n\n    ","\n    ","\n  }\n  "])),b.attributeColor?"vColor":"constantColor",c.glsl.float(u.symbolAlphaCutoff),
0===b.output?c.glsl(l||(l=d.__makeTemplateObject(["gl_FragColor \x3d highlightSlice(finalColor, vpos);"],["gl_FragColor \x3d highlightSlice(finalColor, vpos);"]))):"",4===b.output?c.glsl(m||(m=d.__makeTemplateObject(["outputHighlight();"],["outputHighlight();"]))):""));return a};var f,g,h,l,m,k});